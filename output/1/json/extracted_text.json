{
  "text": "--- Page 1 ---\nComputer Science &\nSoftware Engineering\nSoftware Requirements Specification of the\nIUfA's UUIS -- a Team 4\nCOMP5541-W10 Project Approach\nBy\nAbdulrahman Al-Sharawi\nDeyvisson Oliveira\nBing Liu\nMax Mayantz\nYu Ming Zhang\nAli Alhazmi\nRobin de Bled\nKanj Sobh\n--- Page 2 ---\nTable of Contents\n1. Introduction ........................................................................................... 2\n2. Purpose .................................................................................................... 2\n3. Scope ........................................................................................................ 2\n4. System Description ................................................................................ 3\n4.1.Inventory assets ......................................................................................... 3\n4.2.University structure .................................................................................... 3\n4.3.Users levels ................................................................................................ 3\n4.4.User roles .................................................................................................... 3\n4.5Permissions List ........................................................................................... 4\n5. Functional requirements ...................................................................... 7\n5.1 Entity relationship Diagram …………………………………………….. 7\n5.2. Transferring Assets ................................................................................... 8\n5.3.Editing Assets ............................................................................................ 8\n5.4.Modifying assets ........................................................................................ 8\n5.5.Adding inventory assets ............................................................................ 8\n5.6.Creating request to borrow an asset or a reserve a space: ......................... 8\n5.7.Retuning assets .......................................................................................... 8\n5.8.Creating a new space ................................................................................. 8\n5.9.Approving requests .................................................................................... 8\n5.10.Authentication .......................................................................................... 8\n5.11.Changing permission ................................................................................ 9\n5.12.Output reports .......................................................................................... 9\n6. Non functional requirements ............................................................... 7\n6.1.Usability ...................................................................................................... 7\n6.2.Availability ................................................................................................. 7\n6.3.Portability ................................................................................................... 7\n6.4.Security ....................................................................................................... 7\n6.5.Maintainability ............................................................................................ 7\n7. USE CASES ............................................................................................ 8\n8.Entity relationship diagram .................................................................28\n9. Cost Estimation (COCOMO) .............................................................29\n10. References ...........................................................................................30\n--- Page 3 ---\n1. Introduction\nThis document presents the business requirement of Unified University Inventory System\n(UUIS) in Technology-independent manner. All attempts have been made in using\nmostly business terminology and business language while describing the requirements in\nthis document. Very minimal and commonly understood Technical terminology is used.\nUse case approach is used in modeling the business requirements in this document.\n2. Purpose\nIUFA purpose is to integrate 3 faculties data bases providing Web interface that allows\nuser to access and manage the integrated inventory.\nThe IUFA guarantee a secure access to the data from outside university at any time\nduring working hours\n3. Scope\nThe IUFA application give the unauthorised user the possibility to use a web based\ninterface that will available to use any time\nIUfA involve to the following operations:\n- Transferring assets\n- Editing assets\n- Modifying assets\n- Adding inventory assets\n- Creating request to borrow an asset or a reserve a space\n- Retuning assets\n- Creating a new space\n- Approving requests\n- Authentication\n- Search\n- Changing permission\n- Output reports\n--- Page 4 ---\n4. System Description\n4.1. Inventory assets\nAssets in the inventory are classified in 3 types\n Rooms and space\n Software licences\n All other assets\nAssets can be grouped like computer parts\n4.2. University structure\nUniversity organizational hierarchy is represented by the following\nUniversity\nFaculty of Faculty of Faculty of\nArts and Computer Engineering\nScience Science\nDepartment of Department of Department of\nBiology Software Engineering\nEngineering\nDepartment of Department of Department of\nSociology Computer Theory Mathmatics\n4.3. Users levels\nThree administrative levels that can approve inventory transactions\n University level (level 3)\n Faculty level (level 2)\n Department level (level 1)\n Users’ level can place inventory requests (level 0)\n IT and security level to maintain the inventory (level 4)\n4.4. User roles\nA user can have one of the following role\n University administrators\n Faculty administrators\n Department administrators\n--- Page 5 ---\n Inventory administrators: users that can be delegated by any administrative\nlevel to work and on the applications assigned permission can varies from\none user to another depending on its assigned tasks.\nInventory administrators can be affected to any administrative or\norganizational level according to their assigned tasks\n Users: students and professors\n IT team system administrators that maintain the system\n4.5. Permissions List\nPermission are should be grouped by role in the following way:\n Department administrator have control on his department inventory\n Faculty administrator have control on his faculty inventory\n University administrator and IT Administrators have the control on the entire\ninventory\n IT administrators can create different category of permission to help\nadministrators to delegate a part of their tasks\nThis list resume all permission that a user can have\n1. Request related permissions\n1.1. request:create\n1.2. request:list\n1.3. request:show\n1.4. request:edit\n1.5. request:aproval or rejection\n2. Asset related permissions\n2.1. asset:create\n2.2. asset:list\n2.3. asset:show\n2.4. asset:edit and modify\n3. Location related permissions\n3.1. location:create\n3.2. location:list\n3.3. location:show\n3.4. location:edit\n3.5. location:delete\n4. University related permissions\n4.1. universityPart:create\n4.2. universityPart:list\n4.3. universityPart:show\n4.4. universityPart:edit\n--- Page 6 ---\n4.5. universityPart:delete\n5. search permission\n5.1. search:simple\n5.2. search:advanced\n6. reports related permission\n6.1. report:list\n6.2. report:show\n7. User actions related permission\n7.1. user:list\n7.2. user:show\n7.3. user:editand change permissions\n8. Audit related permissions\n8.1. audit:list\n8.2. audit:show\nNote that permissions for each administrative level are predefined\n Level 0 has the permission to create requests only\n Level 1 can control the assets and locations that he owns\n Level 2 can control the assets and locations that owns and get all level1\npermissions\n Level 3 can control the assets and locations that owns and get all level2\npermissions\n Level 1, 2 and 3 can delegate some or all of their permission to any user\n Level 4 has all possible permissions. Level 4 for can create and assign\npermission to a new groups\n--- Page 7 ---\n5. Functional requirements\n5.1. Transferring Assets\n5.1.1. Within the same department: data base can be updated directly without\nany request\n5.1.2. Inter departments: request must be approved by a DA group member and\nfaculty group member unless it came from a higher level group\n5.1.3. Inter faculties transfer: request can be made by any authorised user and\napproved by faculty group or higher level\n5.1.4. Transfer outside university should be approved by the university group\n5.2. Editing Assets\n5.2.1. Any administrative level user or inventory user can edit an asset that\nbelongs to its department; same thing for faculty user, or university user; in\norder to make modification if he is authorised to do it.\n5.3. Modifying assets\n5.3.1. all fields of an edited asset can be modified except Ids\n5.3.2. a bulk entry file can be used\n5.4. Adding inventory assets\n5.4.1. Any DA group member or authorised inventory group member asset is\nowned by the department\n5.4.2. Any faculty member can add all related departments inventory\n5.4.3. Any university group member can add all assets in the inventory\n5.4.4. A bulk entry can be used to add many assets\n5.5. Creating request to borrow an asset or a reserve a location\n5.5.1. request can be made by any authorised user\n5.5.2. After creation a request still pending waiting to be approved by an\nadministrative level user according to that have this authority\n5.6. Retuning assets\n5.6.1. An inventory user should check returned asset and update inventory\n5.7. Creating a new location\n5.7.1. IT group members can create a new space and modify floor structure when\nthey receive an exception request from any administrative level\n5.8. Approving requests\n5.8.1. Any administration level or authorised inventory group member can\ndisplay all pending requests waiting for approval from this level and approve\nthose requests\n5.8.2. When request is treated user is notified by email\n5.8.3. Request is added to the waiting for execution list\n5.8.4. Inventory is updated when user receive requested asset\n--- Page 8 ---\n5.9. Authentication\n5.9.1. Authentication is made by user name and a password for all users\n5.9.2. administrative level working on administration computer\n5.10. Changing permission\n5.10.1. Any administrative level user can delegate another user to execute some or\nall his authorized actions. And this user acquires the role of inventory\nadministrator\n5.11. Output reports\n5.11.1. Asset report by location\n5.11.2. Request report\n5.11.3. User permission user\n6. Non functional requirements\n6.1. Usability\nIt is mandatory that learning time is between 2 to 4 hours at maximum, because many\ntask are delegated to working students.\nWeb interface should use clear and consistence terminology in such a way that user;\nwith basic experience on internet and office; find the application easy to use\n6.2. Availability\nThe Application should be available always at working hours. Any maintenance or\nbackup operation should be conducted out of working time\n6.3. Portability\nThe Application should be installed in any Microsoft or Unix platform\nWeb application should available to run on browsers like IE, Firefox, Chrome, Opera\nor Safari\n6.4. Security\nAll user are authenticated by user name and a password\nPermission are assigned to user according to their roles\nOnly IT team member can access and maintain data base servers locally\nQuery is killed if takes more than 1 min\nBackup operation are executed periodically\n6.5. Maintainability\nIt is important to design system to facilitated future evolution and facilitate\nmaintenance operations\n--- Page 9 ---\n7. USE CASES\nName: Modify Use Case\nIdentifier: MOD.UC\nDescription\nThe use case describes the modification that the Inventory Admin can do.\nGoal\nThe Inventory Admin initiates the use case. The use case presents all the modification\nthat can be done by the Inventory Admin.\nPreconditions\n1. The Inventory Admin is authenticated\nAssumptions\n1. We assume that use Knows the results of each operation there is no go back\nactions\nBasic Course\n1. Use case begins when Inventory Admin start searching for an asset\n2. Inventory Admin Edit the asset\n3. Inventory Admin modify asset properties\nAlternate Course A:\nCondition: administrator or authorised inventory user is working on waiting for approval\nlist or waiting for execution list\n1. Inventory user or Admin Edit the asset\n2. Inventory user or Admin modify asset properties\nExceptional Course :\n1.\n1. Inventory Admin search for asset\n2. Inventory Admin edit asset\n3. Inventory Admin asset out of inventory\n4. Message error because asset cannot be modified\n2.\n1. Inventory Admin search for asset\n2. Inventory Admin edit asset\n3. Inventory Admin does not have sufficient privileges to edit asset\n4. Message error is displayed\n3.\n1. Inventory Admin search for asset\n2. no asset found\n3. Message error is displayed\nPost conditions\n1. The system state change according to modification\n--- Page 10 ---\nActors\nInventory Admin, Inventory system, Authentication system\nIncluded Use Cases\n1. Search use case\n2. Edit use case\n3. Authentication use case\nNotes\nWe suppose that Hosting system and servers support all the operations\nAuthentication\n* *\n«uses»\nAUthentication System\nModify Item\n*\n* * *\n«uses»\n*\nInventory Admin\nInventory System\n«uses» Edit Item\n*\nSearch\nMOD.UC Modify Use Case\n--- Page 11 ---\nName: Edit Use Case\nIdentifier: EDT.UC\nDescription\nThe use case describes the edit operation that the Inventory Admin can do.\nGoal\nThe Inventory Admin initiates the use case. The use case presents the edit done by the\nInventory Admin.\nPreconditions\n1. The Inventory Admin is authenticated\nAssumptions\n1. We assume that use Knows the results of each operation there is no go back\nactions\nBasic Course\n1. Use case begins when Inventory Admin start searching for an asset\n2. Inventory Admin Edit the asset\nAlternate Course A:\nCondition: administrator or authorised inventory user is working on waiting for approval\nlist or waiting for execution list\n1. Inventory user or Admin Edit the asset\nExceptional Course :\n1.\n1. Inventory Admin search for asset\n2. Inventory Admin edit asset\n3. Inventory Admin does not have sufficient privileges to edit asset\n4. Message error is displayed\n2.\n1. Inventory Admin search for asset\n2. no asset found\n3. Message error is displayed\nPost conditions\n1. The system state change according to modification\nActors\nInventory Admin, Inventory system, Authentication system\n--- Page 12 ---\nIncluded Use Cases\n1. Search use case\n2. Authentication use case\nNotes\nWe suppose that Hosting system and servers support all the operations\nAuthentication\n* *\n«uses»\nAUthentication System\nEdit Item\n*\n* * *\n*\nInventory Admin\nInventory System\n«uses»\n*\nSearch\nEDT.UC Edit Use Case\n--- Page 13 ---\nName: Add New Asset Use Case\nIdentifier: ANI.UC\nDescription\nThe use case describes the operation of adding a new asset to the inventory.\nGoal\nThe Inventory Admin initiates the use case. The use case presents how Inventory Admin\ncan add new inventory asset.\nPreconditions\n1. The Inventory Admin is authenticated\nAssumptions\n1. We assume that use Knows the results of each operation there is no go back\nactions\nBasic Course\n1. Use case begins when Administrator start a new asset\n2. Administrator select asset type\n3. Administrator select asset location\n4. Administrator select owner\n5. Administrator fill all asset properties\nAlternate Course A:\nNone\nExceptional Course:\n1. Use case begins when Administrator start a new asset\n2. Type does not exist in the list\n3. Administrator send exception request to IT to add the new type and the common\nproperties\nPost conditions\n1. Data base is updated\n--- Page 14 ---\nActors\nInventory Admin, Inventory system, Authentication system\nIncluded Use Cases\n1. Authentication use case\nNotes\nWe suppose that Hosting system and servers support all the operations\nAuthentication\n* *\n«uses»\nAUthentication System\nAdd Item\n*\n* * *\nInventory Admin\n«extends»\nInventory System\nCreate\nRequest\nANI.UC: Add New Asset Use Case\n--- Page 15 ---\nName: Create request Use Case\nIdentifier: CRQ.UC\nDescription\nThe use case describes the activity of creating a new request that the User can do.\nGoal\nThe User initiates the use case. The use case presents request process that can be done by\nUser.\nPreconditions\n1. The User is authenticated\nAssumptions\n1. We assume that use Knows the results of each operation\n2. Only basic request form is available for level 0\n3. Requests forms provide search facilities to users levels 1, 2 and 3\nBasic Course\n1. User select basic request form\n2. User type a small request text specifying asset (s) location,..\n3. User click on submit\nAlternate Course A:\n1. User select advanced request form\n2. User enter asset serial number and location\n3. User enter small text describing operation to be done\n4. User click on submit\nAlternate Course B:\n1. User select advanced request form\n2. User enter asset serial number and location\n3. User enter small text describing operation to be done\n4. User can add as many assets as he wants to the list by clicking add another asset\nbutton\n5. User click on submit\nAlternate Course C:\n1. User select exception request form\n2. User enter a text message describing the exception that occurs\n3. User click on submit\nExceptional Course :\n1. User search for asset\n2. Asset not available to be borrowed\n3. Error Message is displayed\n--- Page 16 ---\nPost conditions\nA new request is pending waiting approval\nActors\nInventory Admin, Inventory system, Authentication system\nIncluded Use Cases\n1. Search use case\n2. Authentication use case\nNotes\nWe suppose that Hosting system and servers support all the operations\nAuthentication\n* *\nAUthentication System\n«uses»\nfill basic form\n* *\nCreate a new\nrequest\n* * *\n* {OR} fill advenced form\n*\nInventory Admin * * *\n*\n«extends» fill exceptions * Inventory System\n* form *\n*\nSearch\n*\nCRQ.UC: Create request Use Case\n--- Page 17 ---\nName: Returning Asset\nIdentifier: RTI.UC\nDescription\nThe use case describes the returning asset update that the Inventory Admin can do.\nGoal\nThe Inventory Admin initiates the use case. The use case presents all the updates to the\ninventory that can be done by the Inventory Admin.\nPreconditions\n1. The Inventory Admin is authenticated\nAssumptions\n1. We assume that use Knows the results of each operation there is no go back\nactions\nBasic Course\n1. Use case begins when Inventory Admin start returning\n2. Inventory Admin select asset state to available\nAlternate Course A:\nCondition:\n1. Use case begins when Inventory Admin start returning\n2. Inventory Admin select asset state to damaged\nExceptional Course :\nPost conditions\n1. The inventory system is updated\nActors\nInventory Admin, Inventory system, Authentication system\n--- Page 18 ---\nIncluded Use Cases\n1. Authentication use case\nNotes\nWe suppose that Hosting system and servers support all the operations\nAuthentication\n* *\n«uses»\nAUthentication System\nreturn item\n*\n* * *\n«uses»\nInventory Admin\nInventory System\nchange item status\nRTI.UC: Returning Asset\n--- Page 19 ---\nName: Approving Request\nIdentifier: APR.UC\nDescription\nThe use case describes the approving of requests that an Inventory Admin can do.\nGoal\nThe Inventory Admin initiates the use case. The use case presents all the approval or\ndenial of a user request that can be done by an Inventory Admin.\nPreconditions\n1. The Inventory Admin is authenticated\n2. Request list not empty\nAssumptions\n1. We assume that use Knows the results of each operation\nBasic Course\n1. Use case begins when Inventory Admin display pending request list\n2. System display only requests that he has privileges to approve\n3. Inventory Admin select request that he want to approve\n4. Approve is confirmed\n5. System send notes to users\nAlternate Course A:\nCondition:\n1. Use case begins when Inventory Admin display pending request list\n2. System display only requests that he has privileges to approve\n3. Inventory Admin select request that he want to reject\n4. rejection is confirmed\n5. System send notes to users\nExceptional Course :\nPost conditions\n2. The Inventory system is updated\nActors\nInventory Admin, Inventory system, Authentication system\n--- Page 20 ---\nIncluded Use Cases\n3. Search use case\n4. Edit use case\n5. Authentication use case\nNotes\nWe suppose that Hosting system and servers support all the operations\nAuthentication\n* *\n«uses»\nAUthentication System\nApprove requests\n*\n* * *\nInventory Admin\nInventory System\nAPR.UC: Approving Request\n--- Page 21 ---\nName: change permissions Use Case\nIdentifier: CHP.UC\nDescription\nThe use case describes the modification that Department, Facutly or University\nAdmininistrator can do to a user permissions.\nGoal\nThe administrator initiates the use case. The use case presents all change that can be done\nby the Admininistrators.\nPreconditions\n1. The Administrator is authenticated\nAssumptions\n1. We assume that use Knows the results of each operation\n2. Administrator knows the role of each permission on the permission list\n3. Administrator cannot assigne permissions more than he have\nBasic Course\n1. Use case begins when Administrator press change permission\n2. Administrator select user\n3. Administrator modify permissions\nAlternate Course A:\nCondition: None\nExceptional Course :\n1.\n1. Administrator select user\n2. Administrator modify permissions he give permissions more than he have\n3. An error message is displayed\nPost conditions\n2. The permissions of user are changed\nActors\nAdministrator, Inventory system, Authentication system\n--- Page 22 ---\nIncluded Use Cases\n1. Authentication use case\nNotes\nWe suppose that Hosting system and servers support all the operations\nAuthentication\n* *\n«uses»\nAUthentication System\nChange\npermissions *\n* * *\n*\nAminisrator\nInventory System\n*\nCHP.UC Change Permissions Use Case\n--- Page 23 ---\nName: Authentication Use Case\nIdentifier: ATH.UC\nDescription\nThe use case describes the authentication.\nGoal\nThe User initiates the use case. The use case presents authentication operation\nPreconditions\nNone\nAssumptions\n1. We assume that use Knows the results of each operation\nBasic Course\n1. Use case begins user starts the application\n2. User write user name and password\n3. User press login\n4. User is authenticated\n5. User log on to application main page\nAlternate Course A:\n1. None\nExceptional Course :\n1.\n1. Use case begins user starts the application\n2. User write user name and password\n3. User press login\n4. Authentication fails\n5. An error message is displayed\nPost conditions\nUser is authenticated\nActors\nUser, Authentication system\n--- Page 24 ---\nIncluded Use Cases\nNone\nNotes\nWe suppose that Hosting system and servers support all the operations\nAuthentication\n* * *\nUser AUthentication System\nAUT.UC Authentication Use Case\n--- Page 25 ---\nName: Search\nIdentifier: SRCH.UC\nDescription\nThe use case describes the search operation that only authorised users can do.\nGoal\nThe User initiates the use case. The use case presents search and advanced search that can\nbe done by the User.\nPreconditions\n1. The User is authenticated\n2. Search operation is authorised\nAssumptions\n1. We assume that use Knows the results of each operation\nBasic Course\n1. Use case begins when User start fill searching field\n2. Press submit\n3. Search results are displayed\nAlternate Course A:\n1. Use case begins when User press advanced search\n2. Fills fields\n3. Press submit\n4. Search results are displayed\nExceptional Course :\n1. Use case begins when User start fill searching field\n2. Press submit\n3. No results are found message is displayed\nPost conditions\nNone\nActors\nUser, Inventory system, Authentication system\n--- Page 26 ---\nIncluded Use Cases\n1. Authentication use case\nNotes\nWe suppose that Hosting system and servers support all the operations\nAuthentication\n* *\n«uses»\nAUthentication System\nSearch\n*\n* * *\n*\nUser\nInventory System\n«extends»\nAdvenced *\nSearch\nSRCH.UC Search Use Case\n--- Page 27 ---\nName: Create Reports Use Case\nIdentifier: REP.UC\nDescription\nThe use case describes the creation of reports that the User can do.\nGoal\nThe User initiates the use case. The use case presents reports that can be created by the\nUser. Three reports can be created Reports\n User Permission Report\n Request Report\n Assets By Location Report\nPreconditions\n1. The User is authenticated\n2. User is authorised to create reports\nAssumptions\n1. We assume that use Knows the results of each operation\nBasic Course\n1. Use case begins when User click on a report type\n2. General report is displayed\n3. Report can be filtered\n4. Fields can be sorted\nAlternate Course A:\nNone\nExceptional Course :\nNone\nPost conditions\nReport is generated\nActors\nUser, Inventory system, Authentication system\n--- Page 28 ---\nIncluded Use Cases\n1. Authentication use case\nNotes\nWe suppose that Hosting system and servers support all the operations\nAuthentication\n* *\n«uses»\nAUthentication System\nUser Permission\n«extends» Report\n*\nCreate\n*\nReprot «extends» *\n* * *\nRequest Report * *\nUser\n* Inventory System\n«extends» *\nAssets By Location*\nReport *\nREP.UC Create reports Use Case\n--- Page 29 ---\n8. Entity relationship diagram\n--- Page 30 ---\n9. Cost Estimation (COCOMO)\nConsidering a 3 months project (14w), 8 people working 10 hours/weak =>\n1120 hours (/160h) = 7 person months\nPM = ai*EAF*KSLOC^bi\nKSLOC = (PM/(ai*EAF))^(1/bi)\nKSLOC = 1.078\nPricing per hour = $20\nProject Total = $22,400.00\n--- Page 31 ---\n10.\nReferences\n[1] Shari Lawrence Peeger and Joanne M. Atlee. Software Engineering: Theory and Practice.\nPrentice Hall, fourth edition, 2009. ISBN: 978-0-13-606169-4.\n[2] Object-Oriented Software Engineering: Practical Software\nDevelopment using UML and Java, Timothy Lethbridge, ISBN: 0077109082\nPublisher: Mcgraw-Hill\nEdition: 2\n[3] The Elements of UML 2.0 Style\nCambridge University Press, 2005 ISBN: 0-521-61678-6\nhttp://www.agilemodeling.com/style/useCaseDiagram.htm\n[4] Class diagram – Wikipedia\nhttp://en.wikipedia.org/wiki/Class_diagram\n[5] Sequence Diagram - Wikipedia\nhttp://en.wikipedia.org/wiki/Sequence_diagram",
  "metadata": {
    "title": "Copm5541 SRS 1",
    "author": "Team4-Comp5541",
    "creator": "Microsoft® Office Word 2007",
    "producer": "Microsoft® Office Word 2007",
    "subject": "",
    "keywords": "",
    "page_count": 31
  }
}