{
  "rag_context": "Drawing UML with PlantUML\nPlantUML Language Reference Guide\n(Version 1.2025.0)\nPlantUML is a component that allows to quickly write :\n• Sequence diagram\n• Usecase diagram\n• Class diagram\n• Object diagram\n• Activity diagram\n• Component diagram\n• Deployment diagram\n• State diagram\n• Timing diagram\nThe following non-UML diagrams are also supported:\n• JSON Data\n• YAML Data\n• Network diagram (nwdiag)\n• Wireframe graphical interface\n• Archimate diagram\n• Specification and Description Language (SDL)\n• Ditaa diagram\n• Gantt diagram\n• MindMap diagram\n• Work Breakdown Structure diagram\n• Mathematic with AsciiMath or JLaTeXMath notation\n• Entity Relationship diagram\nDiagrams are defined using a simple and intuitive language.\n1 SEQUENCE DIAGRAM\n1 Sequence Diagram\nCreating sequence diagrams with PlantUML is remarkably straightforward. This ease of use is largely\nattributed to the user-friendly nature of its syntax, designed to be both intuitive and easy to remember.\n• Intuitive Syntax:\nFirst and foremost, users appreciate the straightforward and intuitive syntax that PlantUML employs.\nThis well-thought-out design means that even those new to diagram creation find it easy to grasp the\nbasics quickly and without hassle.\n• Text-to-Graphic Correlation:\nAnotherdistinguishingfeatureisthecloseresemblancebetweenthetextualrepresentationandthegraph-\nical output. This harmonious correlation ensures that the textual drafts translate quite accurately into\ngraphical diagrams, providing a cohesive and predictable design experience without unpleasant surprises\nin the final output.\n• Eﬀicient Crafting Process:\nThe strong correlation between the text and the graphical result not only simplifies the crafting process\nbutalsosignificantlyspeedsitup. Usersbenefitfromamorestreamlinedprocesswithfewerrequirements\nfor time-consuming revisions and adjustments.\n• Visualization While Drafting:\nThe ability to envisage the final graphical outcome while drafting the text is a feature that many find\ninvaluable. It naturally fosters a smooth transition from initial draft to final presentation, enhancing\nproductivity and reducing the likelihood of errors.\n• Easy Edits and Revisions:\nImportantly, editing existing diagrams is a hassle-free process. Since the diagrams are generated from\ntext, users find that making adjustments is considerably easier and more precise than altering an image\nusinggraphicaltools. Itboilsdowntosimplymodifyingthetext, aprocessfarmorestraightforwardand\nless prone to errors than making changes through a graphical interface with a mouse.\nPlantUML facilitates a straightforward and user-friendly approach to creating and editing sequence dia-\ngrams,meetingtheneedsofbothnovicesandseasoneddesignersalike. Itskillfullyleveragesthesimplicity\noftextualinputstocraftvisuallydescriptiveandaccuratediagrams,therebyestablishingitselfasamust-\nhave tool in the diagram creation toolkit.\nYoucanlearnmoreaboutsomeofthecommoncommandsinPlantUMLtoenhanceyourdiagramcreation\nexperience.\n1.1 Basic Examples\nInPlantUMLsequencediagrams,the->sequencedenotesamessagesentbetweentwoparticipants,which\nare automatically recognized and do not need to be declared beforehand.\nUtilize dotted arrows by employing the --> sequence, offering a distinct visualization in your diagrams.\nTo improve readability without affecting the visual representation, use reverse arrows like <- or <--.\nHowever, be aware that this is specifically for sequence diagrams and the rules differ for other diagram\ntypes.\n@startuml\nAlice -> Bob: Authentication Request\nBob --> Alice: Authentication Response\nAlice -> Bob: Another authentication Request\nAlice <-- Bob: Another authentication Response\n@enduml\nPlantUML Language Reference Guide (1.2025.0) 1 / 606\n1.2 Declaring participant 1 SEQUENCE DIAGRAM\n1.2 Declaring participant\nIfthekeywordparticipantisusedtodeclareaparticipant,morecontrolonthatparticipantispossible.\nThe order of declaration will be the (default) order of display.\nUsing these other keywords to declare participants will change the shape of the participant represen-\ntation:\n• actor\n• boundary\n• control\n• entity\n• database\n• collections\n• queue\n@startuml\nparticipant Participant as Foo\nactor Actor as Foo1\nboundary Boundary as Foo2\ncontrol Control as Foo3\nentity Entity as Foo4\ndatabase Database as Foo5\ncollections Collections as Foo6\nqueue Queue as Foo7\nFoo -> Foo1 : To actor\nFoo -> Foo2 : To boundary\nFoo -> Foo3 : To control\nFoo -> Foo4 : To entity\nFoo -> Foo5 : To database\nFoo -> Foo6 : To collections\nFoo -> Foo7: To queue\n@enduml\nPlantUML Language Reference Guide (1.2025.0) 2 / 606\n1.2 Declaring participant 1 SEQUENCE DIAGRAM\nRename a participant using the as keyword.\nYou can also change the background color of actor or participant.\n@startuml\nactor Bob #red\n' The only difference between actor\n'and participant is the drawing\nparticipant Alice\nparticipant \"I have a really\\nlong name\" as L #99FF99\n/' You can also declare:\nparticipant L as \"I have a really\\nlong name\" #99FF99\n'/\nAlice->Bob: Authentication Request\nBob->Alice: Authentication Response\nBob->L: Log transaction\n@enduml\nYou can use the order keyword to customize the display order of participants.\n@startuml\nparticipant Last order 30\nparticipant Middle order 20\nparticipant First order 10\nPlantUML Language Reference Guide (1.2025.0) 3 / 606\n1.3 Declaring participant on multiline 1 SEQUENCE DIAGRAM\n@enduml\n1.3 Declaring participant on multiline\nYou can declare participant on multi-line.\n@startuml\nparticipant Participant [\n=Title\n----\n\"\"SubTitle\"\"\n]\nparticipant Bob\nParticipant -> Bob\n@enduml\n[Ref. QA-15232]\n1.4 Use non-letters in participants\nYou can use quotes to define participants. And you can use the as keyword to give an alias to those\nparticipants.\n@startuml\nAlice -> \"Bob()\" : Hello\n\"Bob()\" -> \"This is very\\nlong\" as Long\n' You can also declare:\n' \"Bob()\" -> Long as \"This is very\\nlong\"\nLong --> \"Bob()\" : ok\n@enduml\nPlantUML Language Reference Guide (1.2025.0) 4 / 606\n1.5 Message to Self 1 SEQUENCE DIAGRAM\n1.5 Message to Self\nA participant can send a message to itself.\nIt is also possible to have multi-line using \\n.\n@startuml\nAlice -> Alice: This is a signal to self.\\nIt also demonstrates\\nmultiline \\ntext\n@enduml\n@startuml\nAlice <- Alice: This is a signal to self.\\nIt also demonstrates\\nmultiline \\ntext\n@enduml\n[Ref. QA-1361]\n1.6 Text alignment\nTextalignmentonarrowscanbesettoleft,rightorcenterusingskinparam sequenceMessageAlign.\nYou can also use direction or reverseDirection to align text depending on arrow direction. Further\ndetails and examples of this are available on the skinparam page.\n@startuml\nskinparam sequenceMessageAlign right\nBob -> Alice : Request\nAlice -> Bob : Response\n@enduml\n1.6.1 Text of response message below the arrow\nYoucanputthetextoftheresponsemessagebelowthearrow,withtheskinparam responseMessageBelowArrow\ntrue command.\nPlantUML Language Reference Guide (1.2025.0) 5 / 606\n1.7 Change arrow style 1 SEQUENCE DIAGRAM\n@startuml\nskinparam responseMessageBelowArrow true\nBob -> Alice : hello\nBob <- Alice : ok\n@enduml\n1.7 Change arrow style\nYou can change arrow style by several ways:\n• add a final x to denote a lost message\n• use \\ or / instead of < or > to have only the bottom or top part of the arrow\n• repeat the arrow head (for example, >> or //) head to have a thin drawing\n• use -- instead of - to have a dotted arrow\n• add a final ”o” at arrow head\n• use bidirectional arrow <->\n@startuml\nBob ->x Alice\nBob -> Alice\nBob ->> Alice\nBob -\\ Alice\nBob \\\\- Alice\nBob //-- Alice\nBob ->o Alice\nBob o\\\\-- Alice\nBob <-> Alice\nBob <->o Alice\n@enduml\n1.8 Change arrow color\nYou can change the color of individual arrows using the following notation:\n@startuml\nPlantUML Language Reference Guide (1.2025.0) 6 / 606\n1.9 Message sequence numbering 1 SEQUENCE DIAGRAM\nBob -[#red]> Alice : hello\nAlice -[#0000FF]->Bob : ok\n@enduml\n1.9 Message sequence numbering\nThe keyword autonumber is used to automatically add an incrementing number to messages.\n@startuml\nautonumber\nBob -> Alice : Authentication Request\nBob <- Alice : Authentication Response\n@enduml\nYou can specify a startnumber with autonumber <start> , and also an increment with autonumber\n<start> <increment>.\n@startuml\nautonumber\nBob -> Alice : Authentication Request\nBob <- Alice : Authentication Response\nautonumber 15\nBob -> Alice : Another authentication Request\nBob <- Alice : Another authentication Response\nautonumber 40 10\nBob -> Alice : Yet another authentication Request\nBob <- Alice : Yet another authentication Response\n@enduml\nPlantUML Language Reference Guide (1.2025.0) 7 / 606\n1.9 Message sequence numbering 1 SEQUENCE DIAGRAM\nYou can specify a format for your number by using between double-quote.\nThe formatting is done with the Java class DecimalFormat (0 means digit, # means digit and zero if\nabsent).\nYou can use some html tag in the format.\n@startuml\nautonumber \"<b>[000]\"\nBob -> Alice : Authentication Request\nBob <- Alice : Authentication Response\nautonumber 15 \"<b>(<u>##</u>)\"\nBob -> Alice : Another authentication Request\nBob <- Alice : Another authentication Response\nautonumber 40 10 \"<font color=red><b>Message 0 \"\nBob -> Alice : Yet another authentication Request\nBob <- Alice : Yet another authentication Response\n@enduml\nYou can also use autonumber stop and autonumber resume <increment> <format> to respectively\npause and resume automatic numbering.\n@startuml\nautonumber 10 10 \"<b>[000]\"\nBob -> Alice : Authentication Request\nBob <- Alice : Authentication Response\nautonumber stop\nBob -> Alice : dummy\nPlantUML Language Reference Guide (1.2025.0) 8 / 606\n1.9 Message sequence numbering 1 SEQUENCE DIAGRAM\nautonumber resume \"<font color=red><b>Message 0 \"\nBob -> Alice : Yet another authentication Request\nBob <- Alice : Yet another authentication Response\nautonumber stop\nBob -> Alice : dummy\nautonumber resume 1 \"<font color=blue><b>Message 0 \"\nBob -> Alice : Yet another authentication Request\nBob <- Alice : Yet another authentication Response\n@enduml\nYour startnumber can also be a 2 or 3 digit sequence using a field delimiter such as ., ;, ,, : or a mix\nof these. For example: 1.1.1 or 1.1:1.\nAutomatically the last digit will increment.\nTo increment the first digit, use: autonumber inc A. To increment the second digit, use: autonumber\ninc B.\n@startuml\nautonumber 1.1.1\nAlice -> Bob: Authentication request\nBob --> Alice: Response\nautonumber inc A\n'Now we have 2.1.1\nAlice -> Bob: Another authentication request\nBob --> Alice: Response\nautonumber inc B\n'Now we have 2.2.1\nAlice -> Bob: Another authentication request\nBob --> Alice: Response\nautonumber inc A\n'Now we have 3.1.1\nAlice -> Bob: Another authentication request\nautonumber inc B\n'Now we have 3.2.1\nBob --> Alice: Response\n@enduml\nPlantUML Language Reference Guide (1.2025.0) 9 / 606",
  "notation": [],
  "best_practices": [],
  "examples": [],
  "relationships": [
    "For example: 1.1.1 or 1.1:1.",
    "@startuml\nautonumber\nBob -> Alice : Authentication Request\nBob <- Alice : Authentication Response\n@enduml\nYou can specify a startnumber with autonumber <start> , and also an increment with autonumber\n<start> <increment>.",
    "QA-15232]\n1.4 Use non-letters in participants\nYou can use quotes to define participants.",
    "@startuml\nparticipant Participant [\n=Title\n----\n\"\"SubTitle\"\"\n]\nparticipant Bob\nParticipant -> Bob\n@enduml\n[Ref.",
    "To improve readability without affecting the visual representation, use reverse arrows like <- or <--.",
    "1.1 Basic Examples\nInPlantUMLsequencediagrams,the->sequencedenotesamessagesentbetweentwoparticipants,which\nare automatically recognized and do not need to be declared beforehand.",
    "Further\ndetails and examples of this are available on the skinparam page.",
    "It naturally fosters a smooth transition from initial draft to final presentation, enhancing\nproductivity and reducing the likelihood of errors.",
    "Automatically the last digit will increment.",
    "@startuml\nskinparam sequenceMessageAlign right\nBob -> Alice : Request\nAlice -> Bob : Response\n@enduml\n1.6.1 Text of response message below the arrow\nYoucanputthetextoftheresponsemessagebelowthearrow,withtheskinparam responseMessageBelowArrow\ntrue command.",
    "This well-thought-out design means that even those new to diagram creation find it easy to grasp the\nbasics quickly and without hassle.",
    "The order of declaration will be the (default) order of display.",
    "You can use some html tag in the format.",
    "PlantUML facilitates a straightforward and user-friendly approach to creating and editing sequence dia-\ngrams,meetingtheneedsofbothnovicesandseasoneddesignersalike.",
    "To increment the first digit, use: autonumber inc A.",
    "To increment the second digit, use: autonumber\ninc B.",
    "• Text-to-Graphic Correlation:\nAnotherdistinguishingfeatureisthecloseresemblancebetweenthetextualrepresentationandthegraph-\nical output.",
    "YoucanlearnmoreaboutsomeofthecommoncommandsinPlantUMLtoenhanceyourdiagramcreation\nexperience.",
    "@startuml\nparticipant Last order 30\nparticipant Middle order 20\nparticipant First order 10\nPlantUML Language Reference Guide (1.2025.0) 3 / 606\n1.3 Declaring participant on multiline 1 SEQUENCE DIAGRAM\n@enduml\n1.3 Declaring participant on multiline\nYou can declare participant on multi-line.",
    "• Intuitive Syntax:\nFirst and foremost, users appreciate the straightforward and intuitive syntax that PlantUML employs.",
    "@startuml\nAlice -> Alice: This is a signal to self.\\nIt also demonstrates\\nmultiline \\ntext\n@enduml\n@startuml\nAlice <- Alice: This is a signal to self.\\nIt also demonstrates\\nmultiline \\ntext\n@enduml\n[Ref.",
    "This ease of use is largely\nattributed to the user-friendly nature of its syntax, designed to be both intuitive and easy to remember.",
    "This harmonious correlation ensures that the textual drafts translate quite accurately into\ngraphical diagrams, providing a cohesive and predictable design experience without unpleasant surprises\nin the final output.",
    "1 SEQUENCE DIAGRAM\n1 Sequence Diagram\nCreating sequence diagrams with PlantUML is remarkably straightforward.",
    "Itboilsdowntosimplymodifyingthetext, aprocessfarmorestraightforwardand\nless prone to errors than making changes through a graphical interface with a mouse.",
    "Itskillfullyleveragesthesimplicity\noftextualinputstocraftvisuallydescriptiveandaccuratediagrams,therebyestablishingitselfasamust-\nhave tool in the diagram creation toolkit.",
    "It is also possible to have multi-line using \\n.",
    "You can also use direction or reverseDirection to align text depending on arrow direction.",
    "However, be aware that this is specifically for sequence diagrams and the rules differ for other diagram\ntypes.",
    "Relationship diagram\nDiagrams are defined using a simple and intuitive language.",
    "Utilize dotted arrows by employing the --> sequence, offering a distinct visualization in your diagrams.",
    "• Visualization While Drafting:\nThe ability to envisage the final graphical outcome while drafting the text is a feature that many find\ninvaluable.",
    "Usersbenefitfromamorestreamlinedprocesswithfewerrequirements\nfor time-consuming revisions and adjustments.",
    "Since the diagrams are generated from\ntext, users find that making adjustments is considerably easier and more precise than altering an image\nusinggraphicaltools.",
    "QA-1361]\n1.6 Text alignment\nTextalignmentonarrowscanbesettoleft,rightorcenterusingskinparam sequenceMessageAlign.",
    "• Easy Edits and Revisions:\nImportantly, editing existing diagrams is a hassle-free process.",
    "The formatting is done with the Java class DecimalFormat (0 means digit, # means digit and zero if\nabsent).",
    "You can also change the background color of actor or participant.",
    "And you can use the as keyword to give an alias to those\nparticipants.",
    "• Eﬀicient Crafting Process:\nThe strong correlation between the text and the graphical result not only simplifies the crafting process\nbutalsosignificantlyspeedsitup."
  ],
  "validation_rules": [
    ".7 Change arrow style 1 SEQUENCE DIAGRAM",
    "add a final x to denote a lost message",
    "use bidirectional arrow <->",
    "database",
    "use -- instead of - to have a dotted arrow",
    ".2 Declaring participant 1 SEQUENCE DIAGRAM",
    ".9 Message sequence numbering",
    ".6 Text alignment",
    "queue",
    "control",
    "entity",
    "add a final ”o” at arrow head",
    ".6.1 Text of response message below the arrow",
    "repeat the arrow head (for example, >> or //) head to have a thin drawing",
    ".5 Message to Self",
    ".3 Declaring participant on multiline",
    ".9 Message sequence numbering 1 SEQUENCE DIAGRAM",
    ".3 Declaring participant on multiline 1 SEQUENCE DIAGRAM",
    ".8 Change arrow color",
    ".4 Use non-letters in participants",
    "actor",
    "collections",
    "---",
    ".7 Change arrow style",
    ".2 Declaring participant",
    "use \\ or / instead of < or > to have only the bottom or top part of the arrow",
    "boundary",
    ".5 Message to Self 1 SEQUENCE DIAGRAM"
  ]
}