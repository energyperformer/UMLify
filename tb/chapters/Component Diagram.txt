7
COMPONENT DIAGRAM
7
Component Diagram
Component Diagram: A component diagram is a type of structural diagram used in UML (Uni-
fied Modeling Language) to visualize the organization and relationships of system components. These
diagrams help in breaking down complex systems into manageable components, showcasing their inter-
dependencies, and ensuring eﬀicient system design and architecture.
Advantages of PlantUML:
• Simplicity: With PlantUML, you can create component diagrams using simple and intuitive text-
based descriptions, eliminating the need for complex drawing tools.
• Integration: PlantUML seamlessly integrates with various tools and platforms, making it a ver-
satile choice for developers and architects.
• Collaboration: The PlantUML forum offers a platform for users to discuss, share, and seek
assistance on their diagrams, fostering a collaborative community.
7.1
Components
Components must be bracketed.
You can also use the component keyword to define a component. In this case the brackets can be omitted,
but only if the component name does not include white-space or special characters.
You can define an alias, using the as keyword. This alias will be used later, when defining relations.
@startuml
[First component]
[Another component] as Comp2
component Comp3
component [Last\ncomponent] as Comp4
@enduml
7.1.1
Naming exceptions
Note that component names starting with $ cannot be hidden or removed later, because hide and remove
command will consider the name a $tag instead of a component name. To later remove such component
they must have an alias or must be tagged.
@startuml
component [$C1]
component [$C2] $C2
component [$C2] as dollarC2
remove $C1
remove $C2
remove dollarC2
@enduml
PlantUML Language Reference Guide (1.2025.0)
164 / 606


7.2
Interfaces
7
COMPONENT DIAGRAM
7.2
Interfaces
Interface can be defined using the () symbol (because this looks like a circle).
You can also use the interface keyword to define an interface. And you can define an alias, using the
as keyword. This alias will be used latter, when defining relations.
We will see latter that interface definition is optional.
@startuml
() "First Interface"
() "Another interface" as Interf2
interface Interf3
interface "Last\ninterface" as Interf4
[component]
footer //Adding "component" to force diagram to be a **component diagram**//
@enduml
7.3
Basic example
Links between elements are made using combinations of dotted line (..), straight line (--), and arrows
(-->) symbols.
@startuml
DataAccess - [First Component]
[First Component] ..> HTTP : use
@enduml
7.4
Using notes
You can use the note left of , note right of , note top of , note bottom of keywords to define
notes related to a single object.
@startuml
[Component] as C
PlantUML Language Reference Guide (1.2025.0)
165 / 606


7.4
Using notes
7
COMPONENT DIAGRAM
note top of C: A top note
note bottom of C
A bottom note can also
be on several lines
end note
note left of C
A left note can also
be on several lines
end note
note right of C: A right note
@enduml
A note can be also defined alone with the note keywords, then linked to other objects using the ..
symbol or whatever arrow symbol (-, --, ...).
@startuml
[Component] as C
note as N
A floating note can also
be on several lines
end note
C .. N
@enduml
Another note example:
@startuml
interface "Data Access" as DA
DA - [First Component]
[First Component] ..> HTTP : use
PlantUML Language Reference Guide (1.2025.0)
166 / 606


7.5
Grouping Components
7
COMPONENT DIAGRAM
note left of HTTP : Web Service only
note right of [First Component]
A note can also
be on several lines
end note
@enduml
7.5
Grouping Components
You can use several keywords to group components and interfaces together:
• package
• node
• folder
• frame
• cloud
• database
@startuml
package "Some Group" {
HTTP - [First Component]
[Another Component]
}
node "Other Groups" {
FTP - [Second Component]
[First Component] --> FTP
}
cloud {
[Example 1]
}
database "MySql" {
folder "This is my folder" {
[Folder 3]
}
frame "Foo" {
[Frame 4]
}
}
PlantUML Language Reference Guide (1.2025.0)
167 / 606


7.6
Changing arrows direction
7
COMPONENT DIAGRAM
[Another Component] --> [Example 1]
[Example 1] --> [Folder 3]
[Folder 3] --> [Frame 4]
@enduml
7.6
Changing arrows direction
By default, links between classes have two dashes -- and are vertically oriented. It is possible to use
horizontal link by putting a single dash (or dot) like this:
@startuml
[Component] --> Interface1
[Component] -> Interface2
@enduml
You can also change directions by reversing the link:
@startuml
PlantUML Language Reference Guide (1.2025.0)
168 / 606


7.6
Changing arrows direction
7
COMPONENT DIAGRAM
Interface1 <-- [Component]
Interface2 <- [Component]
@enduml
It is also possible to change arrow direction by adding left, right, up or down keywords inside the arrow:
@startuml
[Component] -left-> left
[Component] -right-> right
[Component] -up-> up
[Component] -down-> down
@enduml
You can shorten the arrow by using only the first character of the direction (for example, -d- instead of
-down-) or the two first characters (-do-).
Please note that you should not abuse this functionality : Graphviz gives usually good results without
tweaking.
And with the left to right direction parameter:
@startuml
left to right direction
[Component] -left-> left
[Component] -right-> right
[Component] -up-> up
[Component] -down-> down
@enduml
PlantUML Language Reference Guide (1.2025.0)
169 / 606


7.7
Use UML2 notation
7
COMPONENT DIAGRAM
See also ’Change diagram orientation’ on Deployment diagram page.
7.7
Use UML2 notation
By default (from v1.2020.13-14), UML2 notation is used.
@startuml
interface "Data Access" as DA
DA - [First Component]
[First Component] ..> HTTP : use
@enduml
7.8
Use UML1 notation
The skinparam componentStyle uml1 command is used to switch to UML1 notation.
@startuml
skinparam componentStyle uml1
interface "Data Access" as DA
DA - [First Component]
[First Component] ..> HTTP : use
@enduml
PlantUML Language Reference Guide (1.2025.0)
170 / 606


7.9
Use rectangle notation (remove UML notation)
7
COMPONENT DIAGRAM
7.9
Use rectangle notation (remove UML notation)
The skinparam componentStyle rectangle command is used to switch to rectangle notation (without
any UML notation).
@startuml
skinparam componentStyle rectangle
interface "Data Access" as DA
DA - [First Component]
[First Component] ..> HTTP : use
@enduml
7.10
Long description
It is possible to put description on several lines using square brackets.
@startuml
component comp1 [
This component
has a long comment
on several lines
]
@enduml
7.11
Individual colors
You can specify a color after component definition.
@startuml
component
[Web Server] #Yellow
@enduml
7.12
Using Sprite in Stereotype
You can use sprites within stereotype components.
@startuml
sprite $businessProcess [16x16/16] {
PlantUML Language Reference Guide (1.2025.0)
171 / 606


7.13
Skinparam
7
COMPONENT DIAGRAM
FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF
FFFFFFFFFF0FFFFF
FFFFFFFFFF00FFFF
FF00000000000FFF
FF000000000000FF
FF00000000000FFF
FFFFFFFFFF00FFFF
FFFFFFFFFF0FFFFF
FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF
}
rectangle " End to End\nbusiness process" <<$businessProcess>> {
rectangle "inner process 1" <<$businessProcess>> as src
rectangle "inner process 2" <<$businessProcess>> as tgt
src -> tgt
}
@enduml
7.13
Skinparam
You can use the skinparam command to change colors and fonts for the drawing.
You can use this command :
• In the diagram definition, like any other commands;
• In an included file;
• In a configuration file, provided in the command line or the Ant task.
You can define specific color and fonts for stereotyped components and interfaces.
@startuml
skinparam interface {
backgroundColor RosyBrown
borderColor orange
}
skinparam component {
FontSize 13
BackgroundColor<<Apache>> Pink
BorderColor<<Apache>> #FF6655
FontName Courier
BorderColor black
PlantUML Language Reference Guide (1.2025.0)
172 / 606


7.13
Skinparam
7
COMPONENT DIAGRAM
BackgroundColor gold
ArrowFontName Impact
ArrowColor #FF6655
ArrowFontColor #777777
}
() "Data Access" as DA
Component "Web Server" as WS << Apache >>
DA - [First Component]
[First Component] ..> () HTTP : use
HTTP - WS
@enduml
@startuml
skinparam component {
backgroundColor<<static lib>> DarkKhaki
backgroundColor<<shared lib>> Green
}
skinparam node {
borderColor Green
backgroundColor Yellow
backgroundColor<<shared_node>> Magenta
}
skinparam databaseBackgroundColor Aqua
[AA] <<static lib>>
[BB] <<shared lib>>
[CC] <<static lib>>
node node1
node node2 <<shared_node>>
database Production
@enduml
PlantUML Language Reference Guide (1.2025.0)
173 / 606


7.14
Specific SkinParameter
7
COMPONENT DIAGRAM
7.14
Specific SkinParameter
7.14.1
componentStyle
• By default (or with skinparam componentStyle uml2), you have an icon for component
@startuml
skinparam BackgroundColor transparent
skinparam componentStyle uml2
component A {
component "A.1" {
}
component A.44 {
[A4.1]
}
component "A.2"
[A.3]
component A.5 [
A.5]
component A.6 [
]
}
[a]->[b]
@enduml
• If you want to suppress it, and to have only the rectangle, you can use skinparam componentStyle
rectangle
@startuml
skinparam BackgroundColor transparent
skinparam componentStyle rectangle
component A {
component "A.1" {
}
component A.44 {
PlantUML Language Reference Guide (1.2025.0)
174 / 606


7.15
Hide or Remove unlinked component
7
COMPONENT DIAGRAM
[A4.1]
}
component "A.2"
[A.3]
component A.5 [
A.5]
component A.6 [
]
}
[a]->[b]
@enduml
[Ref. 10798]
7.15
Hide or Remove unlinked component
By default, all components are displayed:
@startuml
component C1
component C2
component C3
C1 -- C2
@enduml
But you can:
• hide @unlinked components:
@startuml
component C1
component C2
component C3
C1 -- C2
hide @unlinked
@enduml
PlantUML Language Reference Guide (1.2025.0)
175 / 606


7.16
Hide, Remove or Restore tagged component or wildcard
7
COMPONENT DIAGRAM
• or remove @unlinked components:
@startuml
component C1
component C2
component C3
C1 -- C2
remove @unlinked
@enduml
[Ref. QA-11052]
7.16
Hide, Remove or Restore tagged component or wildcard
You can put $tags (using $) on components, then remove, hide or restore components either individually
or by tags.
By default, all components are displayed:
@startuml
component C1 $tag13
component C2
component C3 $tag13
C1 -- C2
@enduml
But you can:
• hide $tag13 components:
@startuml
component C1 $tag13
component C2
component C3 $tag13
PlantUML Language Reference Guide (1.2025.0)
176 / 606


7.16
Hide, Remove or Restore tagged component or wildcard
7
COMPONENT DIAGRAM
C1 -- C2
hide $tag13
@enduml
• or remove $tag13 components:
@startuml
component C1 $tag13
component C2
component C3 $tag13
C1 -- C2
remove $tag13
@enduml
• or remove $tag13 and restore $tag1 components:
@startuml
component C1 $tag13 $tag1
component C2
component C3 $tag13
C1 -- C2
remove $tag13
restore $tag1
@enduml
• or remove * and restore $tag1 components:
@startuml
component C1 $tag13 $tag1
component C2
component C3 $tag13
C1 -- C2
remove *
restore $tag1
@enduml
PlantUML Language Reference Guide (1.2025.0)
177 / 606


7.17
Display JSON Data on Component diagram
7
COMPONENT DIAGRAM
[Ref. QA-7337 and QA-11052]
7.17
Display JSON Data on Component diagram
7.17.1
Simple example
@startuml
allowmixing
component Component
()
Interface
json JSON {
"fruit":"Apple",
"size":"Large",
"color": ["Red", "Green"]
}
@enduml
[Ref. QA-15481]
For another example, see on JSON page.
7.18
Port [port, portIn, portOut]
You can add port with port, portinand portout keywords.
7.18.1
Port
@startuml
[c]
component C {
port p1
port p2
port p3
component c1
}
c --> p1
c --> p2
c --> p3
p1 --> c1
p2 --> c1
@enduml
PlantUML Language Reference Guide (1.2025.0)
178 / 606


7.18
Port [port, portIn, portOut]
7
COMPONENT DIAGRAM
7.18.2
PortIn
@startuml
[c]
component C {
portin p1
portin p2
portin p3
component c1
}
c --> p1
c --> p2
c --> p3
p1 --> c1
p2 --> c1
@enduml
7.18.3
PortOut
@startuml
component C {
portout p1
portout p2
portout p3
component c1
}
[o]
p1 --> o
p2 --> o
p3 --> o
PlantUML Language Reference Guide (1.2025.0)
179 / 606


7.18
Port [port, portIn, portOut]
7
COMPONENT DIAGRAM
c1 --> p1
@enduml
7.18.4
Mixing PortIn & PortOut
@startuml
[i]
component C {
portin p1
portin p2
portin p3
portout po1
portout po2
portout po3
component c1
}
[o]
i --> p1
i --> p2
i --> p3
p1 --> c1
p2 --> c1
po1 --> o
po2 --> o
po3 --> o
c1 --> po1
@enduml
PlantUML Language Reference Guide (1.2025.0)
180 / 606


7.18
Port [port, portIn, portOut]
7
COMPONENT DIAGRAM
PlantUML Language Reference Guide (1.2025.0)
181 / 606