20
INFORMATION ENGINEERING DIAGRAMS
20
Information Engineering Diagrams
Information Engineering diagrams are an extension to the existing Class Diagrams.
This extension adds:
• Additional relations for the Information Engineering notation;
• An entity alias that maps to the class diagram class;
• An additional visibility modifier * to identify mandatory attributes.
Otherwise, the syntax for drawing diagrams is the same as for class diagrams. All other features of class
diagrams are also supported.
See also Chen Entity Relationship Diagrams.
[Ref. GH-31]
20.1
Information Engineering Relations
Type
Symbol
Zero or One
|o--
Exactly One
||--
Zero or Many
}o--
One or Many
}|--
Examples:
@startuml
Entity01 }|..|| Entity02
Entity03 }o..o| Entity04
Entity05 ||--o{ Entity06
Entity07 |o--|| Entity08
@enduml
20.2
Entities
@startuml
entity Entity01 {
* identifying_attribute
--
* mandatory_attribute
optional_attribute
}
@enduml
PlantUML Language Reference Guide (1.2025.0)
436 / 606


20.3
Complete Example
20
INFORMATION ENGINEERING DIAGRAMS
Again, this is the normal class diagram syntax (aside from use of entity instead of class). Anything
that you can do in a class diagram can be done here.
The * visibility modifier can be used to identify mandatory attributes. A space can be used after the
modifier character to avoid conflicts with the creole bold:
@startuml
entity Entity01 {
optional attribute
**optional bold attribute**
* **mandatory bold attribute**
}
@enduml
20.3
Complete Example
@startuml
' hide the spot
' hide circle
' avoid problems with angled crows feet
skinparam linetype ortho
entity "User" as e01 {
*user_id : number <<generated>>
--
*name : text
description : text
}
entity "Card" as e02 {
*card_id : number <<generated>>
sync_enabled: boolean
version: number
last_sync_version: number
--
*user_id : number <<FK>>
other_details : text
}
entity "CardHistory" as e05 {
*card_history_id : number <<generated>>
version : number
--
*card_id : number <<FK>>
other_details : text
}
entity "CardsAccounts" as e04 {
*id : number <<generated>>
--
card_id : number <<FK>>
PlantUML Language Reference Guide (1.2025.0)
437 / 606


20.3
Complete Example
20
INFORMATION ENGINEERING DIAGRAMS
account_id : number <<FK>>
other_details : text
}
entity "Account" as e03 {
*account_id : number <<generated>>
--
user_id : number <<FK>>
other_details : text
}
entity "Stream" as e06 {
*id : number <<generated>>
version: number
searchingText: string
--
owner_id : number <<FK>>
follower_id : number <<FK>>
card_id: number <<FK>>
other_details : text
}
e01 }|..|| e02
e01 }|..|| e03
e02 }|..|| e05
e02 }|..|| e04
e03 }|..|| e04
e02 }|..|| e06
e03 }|..|| e06
@enduml
PlantUML Language Reference Guide (1.2025.0)
438 / 606


20.3
Complete Example
20
INFORMATION ENGINEERING DIAGRAMS
Currently the crows feet do not look very good when the relationship is drawn at an angle to the entity.
This can be avoided by using the linetype ortho skinparam.
PlantUML Language Reference Guide (1.2025.0)
439 / 606