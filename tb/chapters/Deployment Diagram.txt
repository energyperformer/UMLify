8
DEPLOYMENT DIAGRAM
8
Deployment Diagram
A Deployment Diagram is a type of diagram that visualizes the architecture of systems, showcasing
how software components are deployed onto hardware. It provides a clear picture of the distribution of
components across various nodes, such as servers, workstations, and devices.
With PlantUML, creating deployment diagrams becomes a breeze. The platform offers a simple and
intuitive way to design these diagrams using plain text, ensuring rapid iterations and easy version control.
Moreover, the PlantUML forum provides a vibrant community where users can seek help, share ideas,
and collaborate on diagramming challenges. One of the key advantages of PlantUML is its ability to
integrate seamlessly with various tools and platforms, making it a preferred choice for professionals and
enthusiasts alike.
8.1
Declaring element
@startuml
action action
actor actor
actor/ "actor/"
agent agent
artifact artifact
boundary boundary
card card
circle circle
cloud cloud
collections collections
component component
control control
database database
entity entity
file file
folder folder
frame frame
hexagon hexagon
interface interface
label label
node node
package package
person person
process process
queue queue
rectangle rectangle
stack stack
storage storage
usecase usecase
usecase/ "usecase/"
@enduml
PlantUML Language Reference Guide (1.2025.0)
182 / 606


8.1
Declaring element
8
DEPLOYMENT DIAGRAM
You can optionaly put text using bracket [] for a long description.
@startuml
folder folder [
This is a <b>folder
----
You can use separator
====
of different kind
....
and style
]
node node [
This is a <b>node
----
You can use separator
====
of different kind
....
and style
]
database database [
This is a <b>database
----
You can use separator
====
of different kind
....
and style
PlantUML Language Reference Guide (1.2025.0)
183 / 606


8.2
Declaring element (using short form)
8
DEPLOYMENT DIAGRAM
]
usecase usecase [
This is a <b>usecase
----
You can use separator
====
of different kind
....
and style
]
card card [
This is a <b>card
----
You can use separator
====
of different kind
....
and style
<i><color:blue>(add from V1.2020.7)</color></i>
]
@enduml
8.2
Declaring element (using short form)
We can declare element using some short forms.
Long form Keyword
Short form Keyword
Long form example
Short form example
Ref.
actor
: a :
actor actor1
:actor2:
Actors
component
[ c ]
component component1
[component2]
Components
interface
() i
interface interface1
() "interface2"
Interfaces
usecase
( u )
usecase usecase1
(usecase2)
Usecases
8.2.1
Actor
@startuml
actor actor1
:actor2:
@enduml
PlantUML Language Reference Guide (1.2025.0)
184 / 606


8.3
Linking or arrow
8
DEPLOYMENT DIAGRAM
NB: There is an old syntax for actor with guillemet which is now deprecated and will be removed some
days. Please do not use in your diagram.
8.2.2
Component
@startuml
component component1
[component2]
@enduml
8.2.3
Interface
@startuml
interface interface1
() "interface2"
label "//interface example//"
@enduml
8.2.4
Usecase
@startuml
usecase usecase1
(usecase2)
@enduml
8.3
Linking or arrow
You can create simple links between elements with or without labels:
@startuml
node node1
node node2
node node3
node node4
PlantUML Language Reference Guide (1.2025.0)
185 / 606


8.3
Linking or arrow
8
DEPLOYMENT DIAGRAM
node node5
node1 -- node2 : label1
node1 .. node3 : label2
node1 ~~ node4 : label3
node1 == node5
@enduml
It is possible to use several types of links:
@startuml
artifact artifact1
artifact artifact2
artifact artifact3
artifact artifact4
artifact artifact5
artifact artifact6
artifact artifact7
artifact artifact8
artifact artifact9
artifact artifact10
artifact1 --> artifact2
artifact1 --* artifact3
artifact1 --o artifact4
artifact1 --+ artifact5
artifact1 --# artifact6
artifact1 -->> artifact7
artifact1 --0 artifact8
artifact1 --^ artifact9
artifact1 --(0 artifact10
@enduml
You can also have the following types:
@startuml
cloud cloud1
cloud cloud2
cloud cloud3
cloud cloud4
PlantUML Language Reference Guide (1.2025.0)
186 / 606


8.3
Linking or arrow
8
DEPLOYMENT DIAGRAM
cloud cloud5
cloud1 -0- cloud2
cloud1 -0)- cloud3
cloud1 -(0- cloud4
cloud1 -(0)- cloud5
@enduml
or another example:
@startuml
actor foo1
actor foo2
foo1 <-0-> foo2
foo1 <-(0)-> foo2
(ac1) -le(0)-> left1
ac1 -ri(0)-> right1
ac1 .up(0).> up1
ac1 ~up(0)~> up2
ac1 -do(0)-> down1
ac1 -do(0)-> down2
actor1 -0)- actor2
component comp1
component comp2
comp1 *-0)-+ comp2
[comp3] <-->> [comp4]
boundary b1
control c1
b1 -(0)- c1
component comp1
interface interf1
comp1 #~~( interf1
:mode1actor: -0)- fooa1
:mode1actorl: -ri0)- foo1l
[component1] 0)-(0-(0 [componentC]
() component3 )-0-(0 "foo" [componentC]
[aze1] #-->> [aze2]
@enduml
PlantUML Language Reference Guide (1.2025.0)
187 / 606


8.4
Bracketed arrow style
8
DEPLOYMENT DIAGRAM
[Ref. QA-547 and QA-1736]
￿See all type on Appendix.
8.4
Bracketed arrow style
Similar as Bracketed class relations (linking or arrow) style
8.4.1
Line style
It’s also possible to have explicitly bold, dashed, dotted, hidden or plain arrows:
• without label
@startuml
node foo
title Bracketed line style without label
foo --> bar
foo -[bold]-> bar1
foo -[dashed]-> bar2
foo -[dotted]-> bar3
foo -[hidden]-> bar4
foo -[plain]-> bar5
@enduml
• with label
@startuml
title Bracketed line style with label
node foo
foo --> bar
: ￿
foo -[bold]-> bar1
: [bold]
foo -[dashed]-> bar2 : [dashed]
foo -[dotted]-> bar3 : [dotted]
foo -[hidden]-> bar4 : [hidden]
foo -[plain]-> bar5
: [plain]
@enduml
PlantUML Language Reference Guide (1.2025.0)
188 / 606


8.4
Bracketed arrow style
8
DEPLOYMENT DIAGRAM
[Adapted from QA-4181]
8.4.2
Line color
@startuml
title Bracketed line color
node
foo
foo --> bar
foo -[#red]-> bar1
: [#red]
foo -[#green]-> bar2
: [#green]
foo -[#blue]-> bar3
: [#blue]
foo -[#blue;#yellow;#green]-> bar4
@enduml
8.4.3
Line thickness
@startuml
title Bracketed line thickness
node foo
foo --> bar
: ￿
foo -[thickness=1]-> bar1
: [1]
foo -[thickness=2]-> bar2
: [2]
foo -[thickness=4]-> bar3
: [4]
foo -[thickness=8]-> bar4
: [8]
foo -[thickness=16]-> bar5
: [16]
@enduml
PlantUML Language Reference Guide (1.2025.0)
189 / 606


8.5
Change arrow color and style (inline style)
8
DEPLOYMENT DIAGRAM
[Adapted from QA-4949]
8.4.4
Mix
@startuml
title Bracketed line style mix
node foo
foo --> bar
: ￿
foo -[#red,thickness=1]-> bar1
: [#red,1]
foo -[#red,dashed,thickness=2]-> bar2
: [#red,dashed,2]
foo -[#green,dashed,thickness=4]-> bar3 : [#green,dashed,4]
foo -[#blue,dotted,thickness=8]-> bar4
: [blue,dotted,8]
foo -[#blue,plain,thickness=16]-> bar5
: [blue,plain,16]
foo -[#blue;#green,dashed,thickness=4]-> bar6
: [blue;green,dashed,4]
@enduml
8.5
Change arrow color and style (inline style)
You can change the color or style of individual arrows using the inline following notation:
• #color;line.[bold|dashed|dotted];text:color
@startuml
node foo
foo --> bar : normal
foo --> bar1 #line:red;line.bold;text:red
: red bold
foo --> bar2 #green;line.dashed;text:green : green dashed
foo --> bar3 #blue;line.dotted;text:blue
: blue dotted
@enduml
PlantUML Language Reference Guide (1.2025.0)
190 / 606


8.6
Change element color and style (inline style)
8
DEPLOYMENT DIAGRAM
[Ref. QA-3770 and QA-3816] [See similar feature on class diagram]
8.6
Change element color and style (inline style)
You can change the color or style of individual element using the following notation:
• #[color|back:color];line:color;line.[bold|dashed|dotted];text:color
@startuml
agent a
cloud c #pink;line:red;line.bold;text:red
file
f #palegreen;line:green;line.dashed;text:green
node
n #aliceblue;line:blue;line.dotted;text:blue
@enduml
@startuml
agent a
cloud c #pink;line:red;line.bold;text:red [
c
cloud description
]
file
f #palegreen;line:green;line.dashed;text:green {
[c1]
[c2]
}
frame frame {
node
n #aliceblue;line:blue;line.dotted;text:blue
}
@enduml
[Ref. QA-6852]
PlantUML Language Reference Guide (1.2025.0)
191 / 606


8.7
Nestable elements
8
DEPLOYMENT DIAGRAM
8.7
Nestable elements
Here are the nestable elements:
@startuml
action action {
}
artifact artifact {
}
card card {
}
cloud cloud {
}
component component {
}
database database {
}
file file {
}
folder folder {
}
frame frame {
}
hexagon hexagon {
}
node node {
}
package package {
}
process process {
}
queue queue {
}
rectangle rectangle {
}
stack stack {
}
storage storage {
}
@enduml
8.8
Packages and nested elements
8.8.1
Example with one level
@startuml
artifact
artifactVeryLOOOOOOOOOOOOOOOOOOOg
as "artifact" {
file f1
}
card
cardVeryLOOOOOOOOOOOOOOOOOOOg
as "card" {
file f2
}
cloud
cloudVeryLOOOOOOOOOOOOOOOOOOOg
as "cloud" {
file f3
}
component
componentVeryLOOOOOOOOOOOOOOOOOOOg
as "component" {
file f4
PlantUML Language Reference Guide (1.2025.0)
192 / 606


8.8
Packages and nested elements
8
DEPLOYMENT DIAGRAM
}
database
databaseVeryLOOOOOOOOOOOOOOOOOOOg
as "database" {
file f5
}
file
fileVeryLOOOOOOOOOOOOOOOOOOOg
as "file" {
file f6
}
folder
folderVeryLOOOOOOOOOOOOOOOOOOOg
as "folder" {
file f7
}
frame
frameVeryLOOOOOOOOOOOOOOOOOOOg
as "frame" {
file f8
}
hexagon
hexagonVeryLOOOOOOOOOOOOOOOOOOOg
as "hexagon" {
file f9
}
node
nodeVeryLOOOOOOOOOOOOOOOOOOOg
as "node" {
file f10
}
package
packageVeryLOOOOOOOOOOOOOOOOOOOg
as "package" {
file f11
}
queue
queueVeryLOOOOOOOOOOOOOOOOOOOg
as "queue" {
file f12
}
rectangle
rectangleVeryLOOOOOOOOOOOOOOOOOOOg
as "rectangle" {
file f13
}
stack
stackVeryLOOOOOOOOOOOOOOOOOOOg
as "stack" {
file f14
}
storage
storageVeryLOOOOOOOOOOOOOOOOOOOg
as "storage" {
file f15
}
@enduml
8.8.2
Other example
@startuml
artifact Foo1 {
folder Foo2
}
folder Foo3 {
artifact Foo4
}
frame Foo5 {
database Foo6
}
cloud vpc {
node ec2 {
PlantUML Language Reference Guide (1.2025.0)
193 / 606


8.8
Packages and nested elements
8
DEPLOYMENT DIAGRAM
stack stack
}
}
@enduml
@startuml
node Foo1 {
cloud Foo2
}
cloud Foo3 {
frame Foo4
}
database Foo5
{
storage Foo6
}
storage Foo7 {
storage Foo8
}
@enduml
8.8.3
Full nesting
Here is all the nested elements:
• by alphabetical order:
@startuml
action action {
artifact artifact {
card card {
cloud cloud {
component component {
database database {
file file {
folder folder {
frame frame {
hexagon hexagon {
node node {
package package {
PlantUML Language Reference Guide (1.2025.0)
194 / 606


8.8
Packages and nested elements
8
DEPLOYMENT DIAGRAM
process process {
queue queue {
rectangle rectangle {
stack stack {
storage storage {
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
@enduml
PlantUML Language Reference Guide (1.2025.0)
195 / 606


8.8
Packages and nested elements
8
DEPLOYMENT DIAGRAM
PlantUML Language Reference Guide (1.2025.0)
196 / 606


8.8
Packages and nested elements
8
DEPLOYMENT DIAGRAM
• or reverse alphabetical order
@startuml
storage storage {
stack stack {
rectangle rectangle {
queue queue {
process process {
package package {
node node {
hexagon hexagon {
frame frame {
folder folder {
file file {
database database {
component component {
cloud cloud {
card card {
artifact artifact {
action action {
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
@enduml
PlantUML Language Reference Guide (1.2025.0)
197 / 606


8.8
Packages and nested elements
8
DEPLOYMENT DIAGRAM
PlantUML Language Reference Guide (1.2025.0)
198 / 606


8.9
Alias
8
DEPLOYMENT DIAGRAM
8.9
Alias
8.9.1
Simple alias with as
@startuml
node Node1 as n1
node "Node 2" as n2
file f1 as "File 1"
cloud c1 as "this
is
a
cloud"
cloud c2 [this
is
another
cloud]
n1 -> n2
n1 --> f1
f1 -> c1
c1 -> c2
@enduml
8.9.2
Examples of long alias
@startuml
actor
"actor"
as actorVeryLOOOOOOOOOOOOOOOOOOOg
agent
"agent"
as agentVeryLOOOOOOOOOOOOOOOOOOOg
artifact
"artifact"
as artifactVeryLOOOOOOOOOOOOOOOOOOOg
boundary
"boundary"
as boundaryVeryLOOOOOOOOOOOOOOOOOOOg
card
"card"
as cardVeryLOOOOOOOOOOOOOOOOOOOg
cloud
"cloud"
as cloudVeryLOOOOOOOOOOOOOOOOOOOg
collections
"collections" as collectionsVeryLOOOOOOOOOOOOOOOOOOOg
component
"component"
as componentVeryLOOOOOOOOOOOOOOOOOOOg
control
"control"
as controlVeryLOOOOOOOOOOOOOOOOOOOg
database
"database"
as databaseVeryLOOOOOOOOOOOOOOOOOOOg
entity
"entity"
as entityVeryLOOOOOOOOOOOOOOOOOOOg
file
"file"
as fileVeryLOOOOOOOOOOOOOOOOOOOg
folder
"folder"
as folderVeryLOOOOOOOOOOOOOOOOOOOg
frame
"frame"
as frameVeryLOOOOOOOOOOOOOOOOOOOg
hexagon
"hexagon"
as hexagonVeryLOOOOOOOOOOOOOOOOOOOg
interface
"interface"
as interfaceVeryLOOOOOOOOOOOOOOOOOOOg
label
"label"
as labelVeryLOOOOOOOOOOOOOOOOOOOg
node
"node"
as nodeVeryLOOOOOOOOOOOOOOOOOOOg
package
"package"
as packageVeryLOOOOOOOOOOOOOOOOOOOg
person
"person"
as personVeryLOOOOOOOOOOOOOOOOOOOg
queue
"queue"
as queueVeryLOOOOOOOOOOOOOOOOOOOg
PlantUML Language Reference Guide (1.2025.0)
199 / 606


8.9
Alias
8
DEPLOYMENT DIAGRAM
stack
"stack"
as stackVeryLOOOOOOOOOOOOOOOOOOOg
rectangle
"rectangle"
as rectangleVeryLOOOOOOOOOOOOOOOOOOOg
storage
"storage"
as storageVeryLOOOOOOOOOOOOOOOOOOOg
usecase
"usecase"
as usecaseVeryLOOOOOOOOOOOOOOOOOOOg
@enduml
@startuml
actor
actorVeryLOOOOOOOOOOOOOOOOOOOg
as "actor"
agent
agentVeryLOOOOOOOOOOOOOOOOOOOg
as "agent"
artifact
artifactVeryLOOOOOOOOOOOOOOOOOOOg
as "artifact"
boundary
boundaryVeryLOOOOOOOOOOOOOOOOOOOg
as "boundary"
card
cardVeryLOOOOOOOOOOOOOOOOOOOg
as "card"
cloud
cloudVeryLOOOOOOOOOOOOOOOOOOOg
as "cloud"
collections collectionsVeryLOOOOOOOOOOOOOOOOOOOg as "collections"
component
componentVeryLOOOOOOOOOOOOOOOOOOOg
as "component"
control
controlVeryLOOOOOOOOOOOOOOOOOOOg
as "control"
database
databaseVeryLOOOOOOOOOOOOOOOOOOOg
as "database"
entity
entityVeryLOOOOOOOOOOOOOOOOOOOg
as "entity"
file
fileVeryLOOOOOOOOOOOOOOOOOOOg
as "file"
folder
folderVeryLOOOOOOOOOOOOOOOOOOOg
as "folder"
frame
frameVeryLOOOOOOOOOOOOOOOOOOOg
as "frame"
hexagon
hexagonVeryLOOOOOOOOOOOOOOOOOOOg
as "hexagon"
interface
interfaceVeryLOOOOOOOOOOOOOOOOOOOg
as "interface"
label
labelVeryLOOOOOOOOOOOOOOOOOOOg
as "label"
node
nodeVeryLOOOOOOOOOOOOOOOOOOOg
as "node"
package
packageVeryLOOOOOOOOOOOOOOOOOOOg
as "package"
person
personVeryLOOOOOOOOOOOOOOOOOOOg
as "person"
queue
queueVeryLOOOOOOOOOOOOOOOOOOOg
as "queue"
stack
stackVeryLOOOOOOOOOOOOOOOOOOOg
as "stack"
rectangle
rectangleVeryLOOOOOOOOOOOOOOOOOOOg
as "rectangle"
storage
storageVeryLOOOOOOOOOOOOOOOOOOOg
as "storage"
PlantUML Language Reference Guide (1.2025.0)
200 / 606


8.10
Round corner
8
DEPLOYMENT DIAGRAM
usecase
usecaseVeryLOOOOOOOOOOOOOOOOOOOg
as "usecase"
@enduml
[Ref. QA-12082]
8.10
Round corner
@startuml
skinparam rectangle {
roundCorner<<Concept>> 25
}
rectangle "Concept Model" <<Concept>> {
rectangle "Example 1" <<Concept>> as ex1
rectangle "Another rectangle"
}
@enduml
8.11
Specific SkinParameter
8.11.1
roundCorner
@startuml
skinparam roundCorner 15
actor actor
PlantUML Language Reference Guide (1.2025.0)
201 / 606


8.12
Appendix: All type of arrow line
8
DEPLOYMENT DIAGRAM
agent agent
artifact artifact
boundary boundary
card card
circle circle
cloud cloud
collections collections
component component
control control
database database
entity entity
file file
folder folder
frame frame
hexagon hexagon
interface interface
label label
node node
package package
person person
queue queue
rectangle rectangle
stack stack
storage storage
usecase usecase
@enduml
[Ref. QA-5299, QA-6915, QA-11943]
8.12
Appendix: All type of arrow line
@startuml
PlantUML Language Reference Guide (1.2025.0)
202 / 606


8.13
Appendix: All type of arrow head or ’0’ arrow
8
DEPLOYMENT DIAGRAM
left to right direction
skinparam nodesep 5
f3
~~
b3
: ""~~""\n//dotted//
f2
..
b2
: ""..""\n//dashed//
f1
==
b1
: ""==""\n//bold//
f0
--
b0
: ""--""\n//plain//
@enduml
8.13
Appendix: All type of arrow head or ’0’ arrow
8.13.1
Type of arrow head
@startuml
left to right direction
skinparam nodesep 5
f13 --0
b13 : ""--0""
f12 --@
b12 : ""--@""
f11 --:|> b11 : ""--:|>""
f10 --||> b10 : ""--||>""
f9
--|>
b9
: ""--|>""
f8
--^
b8
: ""--^ ""
f7
--\\
b7
: ""--\\\\""
f6
--#
b6
: ""--# ""
f5
--+
b5
: ""--+ ""
f4
--o
b4
: ""--o ""
f3
--*
b3
: ""--* ""
f2
-->>
b2
: ""-->>""
f1
-->
b1
: ""--> ""
f0
--
b0
: ""--
""
@enduml
PlantUML Language Reference Guide (1.2025.0)
203 / 606


8.13
Appendix: All type of arrow head or ’0’ arrow
8
DEPLOYMENT DIAGRAM
8.13.2
Type of ’0’ arrow or circle arrow
@startuml
left to right direction
skinparam nodesep 5
f10 0--0 b10 : "" 0--0 ""
f9 )--(
b9
: "" )--( ""
f8 0)--(0 b8 : "" 0)--(0""
f7 0)--
b7
: "" 0)-- ""
f6 -0)-
b6
: "" -0)- ""
f5 -(0)- b5
: "" -(0)-""
PlantUML Language Reference Guide (1.2025.0)
204 / 606


8.14
Appendix: Test of inline style on all element
8
DEPLOYMENT DIAGRAM
f4 -(0-
b4
: "" -(0- ""
f3 --(0
b3
: "" --(0 ""
f2 --(
b2
: "" --(
""
f1 --0
b1
: "" --0
""
@enduml
8.14
Appendix: Test of inline style on all element
8.14.1
Simple element
@startuml
action action
#aliceblue;line:blue;line.dotted;text:blue
actor actor
#aliceblue;line:blue;line.dotted;text:blue
actor/ "actor/"
#aliceblue;line:blue;line.dotted;text:blue
agent agent
#aliceblue;line:blue;line.dotted;text:blue
artifact artifact
#aliceblue;line:blue;line.dotted;text:blue
boundary boundary
#aliceblue;line:blue;line.dotted;text:blue
card card
#aliceblue;line:blue;line.dotted;text:blue
circle circle
#aliceblue;line:blue;line.dotted;text:blue
cloud cloud
#aliceblue;line:blue;line.dotted;text:blue
collections collections #aliceblue;line:blue;line.dotted;text:blue
component component
#aliceblue;line:blue;line.dotted;text:blue
control control
#aliceblue;line:blue;line.dotted;text:blue
database database
#aliceblue;line:blue;line.dotted;text:blue
entity entity
#aliceblue;line:blue;line.dotted;text:blue
file file
#aliceblue;line:blue;line.dotted;text:blue
PlantUML Language Reference Guide (1.2025.0)
205 / 606


8.14
Appendix: Test of inline style on all element
8
DEPLOYMENT DIAGRAM
folder folder
#aliceblue;line:blue;line.dotted;text:blue
frame frame
#aliceblue;line:blue;line.dotted;text:blue
hexagon hexagon
#aliceblue;line:blue;line.dotted;text:blue
interface interface
#aliceblue;line:blue;line.dotted;text:blue
label label
#aliceblue;line:blue;line.dotted;text:blue
node node
#aliceblue;line:blue;line.dotted;text:blue
package package
#aliceblue;line:blue;line.dotted;text:blue
person person
#aliceblue;line:blue;line.dotted;text:blue
process process
#aliceblue;line:blue;line.dotted;text:blue
queue queue
#aliceblue;line:blue;line.dotted;text:blue
rectangle rectangle
#aliceblue;line:blue;line.dotted;text:blue
stack stack
#aliceblue;line:blue;line.dotted;text:blue
storage storage
#aliceblue;line:blue;line.dotted;text:blue
usecase usecase
#aliceblue;line:blue;line.dotted;text:blue
usecase/ "usecase/"
#aliceblue;line:blue;line.dotted;text:blue
@enduml
8.14.2
Nested element
8.14.3
Without sub-element
@startuml
action action #aliceblue;line:blue;line.dotted;text:blue {
}
artifact artifact #aliceblue;line:blue;line.dotted;text:blue {
}
card card #aliceblue;line:blue;line.dotted;text:blue {
}
cloud cloud #aliceblue;line:blue;line.dotted;text:blue {
}
component component #aliceblue;line:blue;line.dotted;text:blue {
PlantUML Language Reference Guide (1.2025.0)
206 / 606


8.14
Appendix: Test of inline style on all element
8
DEPLOYMENT DIAGRAM
}
database database #aliceblue;line:blue;line.dotted;text:blue {
}
file file #aliceblue;line:blue;line.dotted;text:blue {
}
folder folder #aliceblue;line:blue;line.dotted;text:blue {
}
frame frame #aliceblue;line:blue;line.dotted;text:blue {
}
hexagon hexagon #aliceblue;line:blue;line.dotted;text:blue {
}
node node #aliceblue;line:blue;line.dotted;text:blue {
}
package package #aliceblue;line:blue;line.dotted;text:blue {
}
process process #aliceblue;line:blue;line.dotted;text:blue {
}
queue queue #aliceblue;line:blue;line.dotted;text:blue {
}
rectangle rectangle #aliceblue;line:blue;line.dotted;text:blue {
}
stack stack #aliceblue;line:blue;line.dotted;text:blue {
}
storage storage #aliceblue;line:blue;line.dotted;text:blue {
}
@enduml
8.14.4
With sub-element
@startuml
action
actionVeryLOOOOOOOOOOOOOOOOOOOg
as "action" #aliceblue;line:blue;line.dotted;text:bl
file f1
}
artifact
artifactVeryLOOOOOOOOOOOOOOOOOOOg
as "artifact" #aliceblue;line:blue;line.dotted;text
file f1
}
card
cardVeryLOOOOOOOOOOOOOOOOOOOg
as "card" #aliceblue;line:blue;line.dotted;text:blue
file f2
}
cloud
cloudVeryLOOOOOOOOOOOOOOOOOOOg
as "cloud" #aliceblue;line:blue;line.dotted;text:blu
file f3
}
component
componentVeryLOOOOOOOOOOOOOOOOOOOg
as "component" #aliceblue;line:blue;line.dotted;text
file f4
}
database
databaseVeryLOOOOOOOOOOOOOOOOOOOg
as "database" #aliceblue;line:blue;line.dotted;text
file f5
}
file
fileVeryLOOOOOOOOOOOOOOOOOOOg
as "file" #aliceblue;line:blue;line.dotted;text:blue
file f6
}
folder
folderVeryLOOOOOOOOOOOOOOOOOOOg
as "folder" #aliceblue;line:blue;line.dotted;text:bl
file f7
}
frame
frameVeryLOOOOOOOOOOOOOOOOOOOg
as "frame" #aliceblue;line:blue;line.dotted;text:blu
PlantUML Language Reference Guide (1.2025.0)
207 / 606


8.15
Appendix: Test of style on all element
8
DEPLOYMENT DIAGRAM
file f8
}
hexagon
hexagonVeryLOOOOOOOOOOOOOOOOOOOg
as "hexagon" #aliceblue;line:blue;line.dotted;text:b
file f9
}
node
nodeVeryLOOOOOOOOOOOOOOOOOOOg
as "node" #aliceblue;line:blue;line.dotted;text:blue
file f10
}
package
packageVeryLOOOOOOOOOOOOOOOOOOOg
as "package" #aliceblue;line:blue;line.dotted;text:b
file f11
}
process
processVeryLOOOOOOOOOOOOOOOOOOOg
as "process" #aliceblue;line:blue;line.dotted;text:b
file f11
}
queue
queueVeryLOOOOOOOOOOOOOOOOOOOg
as "queue" #aliceblue;line:blue;line.dotted;text:blu
file f12
}
rectangle
rectangleVeryLOOOOOOOOOOOOOOOOOOOg
as "rectangle" #aliceblue;line:blue;line.dotted;text
file f13
}
stack
stackVeryLOOOOOOOOOOOOOOOOOOOg
as "stack" #aliceblue;line:blue;line.dotted;text:blu
file f14
}
storage
storageVeryLOOOOOOOOOOOOOOOOOOOg
as "storage" #aliceblue;line:blue;line.dotted;text:b
file f15
}
@enduml
8.15
Appendix: Test of style on all element
8.15.1
Simple element
8.15.2
Global style (on componentDiagram)
@startuml
<style>
componentDiagram {
BackGroundColor palegreen
LineThickness 1
LineColor red
}
document {
BackGroundColor white
}
</style>
actor actor
actor/ "actor/"
agent agent
artifact artifact
boundary boundary
card card
circle circle
cloud cloud
collections collections
component component
PlantUML Language Reference Guide (1.2025.0)
208 / 606


8.15
Appendix: Test of style on all element
8
DEPLOYMENT DIAGRAM
control control
database database
entity entity
file file
folder folder
frame frame
hexagon hexagon
interface interface
label label
node node
package package
person person
queue queue
rectangle rectangle
stack stack
storage storage
usecase usecase
usecase/ "usecase/"
@enduml
8.15.3
Style for each element
@startuml
<style>
actor {
BackGroundColor #f80c12
LineThickness 1
LineColor black
}
agent {
BackGroundColor #f80c12
PlantUML Language Reference Guide (1.2025.0)
209 / 606


8.15
Appendix: Test of style on all element
8
DEPLOYMENT DIAGRAM
LineThickness 1
LineColor black
}
artifact {
BackGroundColor #ee1100
LineThickness 1
LineColor black
}
boundary {
BackGroundColor #ee1100
LineThickness 1
LineColor black
}
card {
BackGroundColor #ff3311
LineThickness 1
LineColor black
}
circle {
BackGroundColor #ff3311
LineThickness 1
LineColor black
}
cloud {
BackGroundColor #ff4422
LineThickness 1
LineColor black
}
collections {
BackGroundColor #ff4422
LineThickness 1
LineColor black
}
component {
BackGroundColor #ff6644
LineThickness 1
LineColor black
}
control {
BackGroundColor #ff6644
LineThickness 1
LineColor black
}
database {
BackGroundColor #ff9933
LineThickness 1
LineColor black
}
entity {
BackGroundColor #feae2d
LineThickness 1
LineColor black
}
file {
BackGroundColor #feae2d
LineThickness 1
LineColor black
}
PlantUML Language Reference Guide (1.2025.0)
210 / 606


8.15
Appendix: Test of style on all element
8
DEPLOYMENT DIAGRAM
folder {
BackGroundColor #ccbb33
LineThickness 1
LineColor black
}
frame {
BackGroundColor #d0c310
LineThickness 1
LineColor black
}
hexagon {
BackGroundColor #aacc22
LineThickness 1
LineColor black
}
interface {
BackGroundColor #69d025
LineThickness 1
LineColor black
}
label {
BackGroundColor black
LineThickness 1
LineColor black
}
node {
BackGroundColor #22ccaa
LineThickness 1
LineColor black
}
package {
BackGroundColor #12bdb9
LineThickness 1
LineColor black
}
person {
BackGroundColor #11aabb
LineThickness 1
LineColor black
}
queue {
BackGroundColor #11aabb
LineThickness 1
LineColor black
}
rectangle {
BackGroundColor #4444dd
LineThickness 1
LineColor black
}
stack {
BackGroundColor #3311bb
LineThickness 1
LineColor black
}
storage {
BackGroundColor #3b0cbd
LineThickness 1
PlantUML Language Reference Guide (1.2025.0)
211 / 606


8.15
Appendix: Test of style on all element
8
DEPLOYMENT DIAGRAM
LineColor black
}
usecase {
BackGroundColor #442299
LineThickness 1
LineColor black
}
</style>
actor actor
actor/ "actor/"
agent agent
artifact artifact
boundary boundary
card card
circle circle
cloud cloud
collections collections
component component
control control
database database
entity entity
file file
folder folder
frame frame
hexagon hexagon
interface interface
label label
node node
package package
person person
queue queue
rectangle rectangle
stack stack
storage storage
usecase usecase
usecase/ "usecase/"
@enduml
PlantUML Language Reference Guide (1.2025.0)
212 / 606


8.15
Appendix: Test of style on all element
8
DEPLOYMENT DIAGRAM
[Ref. QA-13261]
8.15.4
Nested element (without level)
8.15.5
Global style (on componentDiagram)
@startuml
<style>
componentDiagram {
BackGroundColor palegreen
LineThickness 2
LineColor red
}
</style>
artifact artifact {
}
card card {
}
cloud cloud {
}
component component {
}
database database {
}
file file {
}
folder folder {
}
frame frame {
}
hexagon hexagon {
PlantUML Language Reference Guide (1.2025.0)
213 / 606


8.15
Appendix: Test of style on all element
8
DEPLOYMENT DIAGRAM
}
node node {
}
package package {
}
queue queue {
}
rectangle rectangle {
}
stack stack {
}
storage storage {
}
@enduml
8.15.6
Style for each nested element
@startuml
<style>
artifact {
BackGroundColor #ee1100
LineThickness 1
LineColor black
}
card {
BackGroundColor #ff3311
LineThickness 1
LineColor black
}
cloud {
BackGroundColor #ff4422
LineThickness 1
LineColor black
}
component {
BackGroundColor #ff6644
LineThickness 1
LineColor black
}
database {
BackGroundColor #ff9933
LineThickness 1
LineColor black
}
file {
BackGroundColor #feae2d
LineThickness 1
LineColor black
}
folder {
BackGroundColor #ccbb33
LineThickness 1
LineColor black
}
frame {
PlantUML Language Reference Guide (1.2025.0)
214 / 606


8.15
Appendix: Test of style on all element
8
DEPLOYMENT DIAGRAM
BackGroundColor #d0c310
LineThickness 1
LineColor black
}
hexagon {
BackGroundColor #aacc22
LineThickness 1
LineColor black
}
node {
BackGroundColor #22ccaa
LineThickness 1
LineColor black
}
package {
BackGroundColor #12bdb9
LineThickness 1
LineColor black
}
queue {
BackGroundColor #11aabb
LineThickness 1
LineColor black
}
rectangle {
BackGroundColor #4444dd
LineThickness 1
LineColor black
}
stack {
BackGroundColor #3311bb
LineThickness 1
LineColor black
}
storage {
BackGroundColor #3b0cbd
LineThickness 1
LineColor black
}
</style>
artifact artifact {
}
card card {
}
cloud cloud {
}
component component {
}
database database {
}
file file {
}
folder folder {
}
frame frame {
}
hexagon hexagon {
PlantUML Language Reference Guide (1.2025.0)
215 / 606


8.15
Appendix: Test of style on all element
8
DEPLOYMENT DIAGRAM
}
node node {
}
package package {
}
queue queue {
}
rectangle rectangle {
}
stack stack {
}
storage storage {
}
@enduml
8.15.7
Nested element (with one level)
8.15.8
Global style (on componentDiagram)
@startuml
<style>
componentDiagram {
BackGroundColor palegreen
LineThickness 1
LineColor red
}
document {
BackGroundColor white
}
</style>
artifact e1 as "artifact" {
file f1
}
card e2 as "card" {
file f2
}
cloud e3 as "cloud" {
file f3
}
component e4 as "component" {
file f4
}
database e5 as "database" {
file f5
}
file e6 as "file" {
file f6
}
folder e7 as "folder" {
file f7
}
frame e8 as "frame" {
file f8
}
hexagon e9 as "hexagon" {
file f9
PlantUML Language Reference Guide (1.2025.0)
216 / 606


8.15
Appendix: Test of style on all element
8
DEPLOYMENT DIAGRAM
}
node e10 as "node" {
file f10
}
package e11 as "package" {
file f11
}
queue e12 as "queue" {
file f12
}
rectangle e13 as "rectangle" {
file f13
}
stack e14 as "stack" {
file f14
}
storage e15 as "storage" {
file f15
}
@enduml
8.15.9
Style for each nested element
@startuml
<style>
artifact {
BackGroundColor #ee1100
LineThickness 1
LineColor black
}
card {
BackGroundColor #ff3311
LineThickness 1
LineColor black
}
cloud {
BackGroundColor #ff4422
LineThickness 1
LineColor black
}
component {
BackGroundColor #ff6644
LineThickness 1
LineColor black
}
database {
BackGroundColor #ff9933
LineThickness 1
LineColor black
}
file {
BackGroundColor #feae2d
LineThickness 1
PlantUML Language Reference Guide (1.2025.0)
217 / 606


8.15
Appendix: Test of style on all element
8
DEPLOYMENT DIAGRAM
LineColor black
}
folder {
BackGroundColor #ccbb33
LineThickness 1
LineColor black
}
frame {
BackGroundColor #d0c310
LineThickness 1
LineColor black
}
hexagon {
BackGroundColor #aacc22
LineThickness 1
LineColor black
}
node {
BackGroundColor #22ccaa
LineThickness 1
LineColor black
}
package {
BackGroundColor #12bdb9
LineThickness 1
LineColor black
}
queue {
BackGroundColor #11aabb
LineThickness 1
LineColor black
}
rectangle {
BackGroundColor #4444dd
LineThickness 1
LineColor black
}
stack {
BackGroundColor #3311bb
LineThickness 1
LineColor black
}
storage {
BackGroundColor #3b0cbd
LineThickness 1
LineColor black
}
</style>
artifact e1 as "artifact" {
file f1
}
card e2 as "card" {
file f2
}
cloud e3 as "cloud" {
file f3
}
component e4 as "component" {
PlantUML Language Reference Guide (1.2025.0)
218 / 606


8.16
Appendix: Test of stereotype with style on all element
8
DEPLOYMENT DIAGRAM
file f4
}
database e5 as "database" {
file f5
}
file e6 as "file" {
file f6
}
folder e7 as "folder" {
file f7
}
frame e8 as "frame" {
file f8
}
hexagon e9 as "hexagon" {
file f9
}
node e10 as "node" {
file f10
}
package e11 as "package" {
file f11
}
queue e12 as "queue" {
file f12
}
rectangle e13 as "rectangle" {
file f13
}
stack e14 as "stack" {
file f14
}
storage e15 as "storage" {
file f15
}
@enduml
8.16
Appendix: Test of stereotype with style on all element
8.16.1
Simple element
@startuml
<style>
.stereo {
BackgroundColor palegreen
}
</style>
actor actor << stereo >>
actor/ "actor/" << stereo >>
agent agent << stereo >>
artifact artifact << stereo >>
boundary boundary << stereo >>
card card << stereo >>
circle circle << stereo >>
PlantUML Language Reference Guide (1.2025.0)
219 / 606


8.16
Appendix: Test of stereotype with style on all element
8
DEPLOYMENT DIAGRAM
cloud cloud << stereo >>
collections collections << stereo >>
component component << stereo >>
control control << stereo >>
database database << stereo >>
entity entity << stereo >>
file file << stereo >>
folder folder << stereo >>
frame frame << stereo >>
hexagon hexagon << stereo >>
interface interface << stereo >>
label label << stereo >>
node node << stereo >>
package package << stereo >>
person person << stereo >>
queue queue << stereo >>
rectangle rectangle << stereo >>
stack stack << stereo >>
storage storage << stereo >>
usecase usecase << stereo >>
usecase/ "usecase/" << stereo >>
@enduml
PlantUML Language Reference Guide (1.2025.0)
220 / 606


8.17
Display JSON Data on Deployment diagram
8
DEPLOYMENT DIAGRAM
8.17
Display JSON Data on Deployment diagram
8.17.1
Simple example
@startuml
allowmixing
component Component
actor
Actor
usecase
Usecase
()
Interface
node
Node
cloud
Cloud
json JSON {
"fruit":"Apple",
"size":"Large",
"color": ["Red", "Green"]
}
@enduml
[Ref. QA-15481]
For another example, see on JSON page.
8.18
Mixing Deployment (Usecase, Component, Deployment) element within
a Class or Object diagram
In order to add a Deployment element or a State element within a Class or Object diagram, you can use
the allowmixing or allow_mixing directive.
8.18.1
Mixing all elements
@startuml
allowmixing
skinparam nodesep 10
abstract
abstract
abstract class
"abstract class"
annotation
annotation
PlantUML Language Reference Guide (1.2025.0)
221 / 606


8.18
Mixing Deployment (Usecase, Component, Deployment) element within a Class or Object
diagram
8
DEPLOYMENT DIAGRAM
circle
circle
()
circle_short_form
class
class
diamond
diamond
<>
diamond_short_form
entity
entity
enum
enum
exception
exception
interface
interface
metaclass
metaclass
protocol
protocol
stereotype
stereotype
struct
struct
object
object
map map {
key => value
}
json JSON {
"fruit":"Apple",
"size":"Large",
"color": ["Red", "Green"]
}
action action
actor actor
actor/ "actor/"
agent agent
artifact artifact
boundary boundary
card card
circle circle
cloud cloud
collections collections
component component
control control
database database
entity entity
file file
folder folder
frame frame
hexagon hexagon
interface interface
label label
node node
package package
person person
process process
queue queue
rectangle rectangle
stack stack
storage storage
usecase usecase
usecase/ "usecase/"
state state
@enduml
PlantUML Language Reference Guide (1.2025.0)
222 / 606


8.19
Port [port, portIn, portOut]
8
DEPLOYMENT DIAGRAM
[Ref. QA-2335 and QA-5329]
8.19
Port [port, portIn, portOut]
You can added port with port, portinand portout keywords.
8.19.1
Port
@startuml
[c]
node node {
port p1
port p2
port p3
file f1
}
PlantUML Language Reference Guide (1.2025.0)
223 / 606


8.19
Port [port, portIn, portOut]
8
DEPLOYMENT DIAGRAM
c --> p1
c --> p2
c --> p3
p1 --> f1
p2 --> f1
@enduml
8.19.2
PortIn
@startuml
[c]
node node {
portin p1
portin p2
portin p3
file f1
}
c --> p1
c --> p2
c --> p3
p1 --> f1
p2 --> f1
@enduml
8.19.3
PortOut
@startuml
node node {
portout p1
portout p2
PlantUML Language Reference Guide (1.2025.0)
224 / 606


8.19
Port [port, portIn, portOut]
8
DEPLOYMENT DIAGRAM
portout p3
file f1
}
[o]
p1 --> o
p2 --> o
p3 --> o
f1 --> p1
@enduml
8.19.4
Mixing PortIn & PortOut
@startuml
[i]
node node {
portin p1
portin p2
portin p3
portout po1
portout po2
portout po3
file f1
}
[o]
i --> p1
i --> p2
i --> p3
p1 --> f1
p2 --> f1
po1 --> o
po2 --> o
po3 --> o
f1 --> po1
@enduml
PlantUML Language Reference Guide (1.2025.0)
225 / 606


8.20
Change diagram orientation
8
DEPLOYMENT DIAGRAM
8.20
Change diagram orientation
You can change (whole) diagram orientation with:
• top to bottom direction (by default)
• left to right direction
8.20.1
Top to bottom (by default)
8.20.2
With Graphviz (layout engine by default)
The main rule is: Nested element first, then simple element.
@startuml
card a
card b
package A {
card a1
card a2
card a3
card a4
card a5
package sub_a {
card sa1
card sa2
card sa3
}
}
package B {
card b1
card b2
card b3
card b4
card b5
package sub_b {
card sb1
card sb2
PlantUML Language Reference Guide (1.2025.0)
226 / 606


8.20
Change diagram orientation
8
DEPLOYMENT DIAGRAM
card sb3
}
}
@enduml
8.20.3
With Smetana (internal layout engine)
The main rule is the opposite: Simple element first, then nested element.
@startuml
!pragma layout smetana
card a
card b
package A {
card a1
card a2
card a3
card a4
card a5
package sub_a {
card sa1
card sa2
card sa3
}
}
package B {
card b1
card b2
card b3
card b4
card b5
package sub_b {
card sb1
card sb2
card sb3
}
}
@enduml
PlantUML Language Reference Guide (1.2025.0)
227 / 606


8.20
Change diagram orientation
8
DEPLOYMENT DIAGRAM
8.20.4
Left to right
8.20.5
With Graphviz (layout engine by default)
@startuml
left to right direction
card a
card b
package A {
card a1
card a2
card a3
card a4
card a5
package sub_a {
card sa1
card sa2
card sa3
}
}
package B {
card b1
card b2
card b3
card b4
card b5
package sub_b {
card sb1
card sb2
card sb3
}
}
@enduml
PlantUML Language Reference Guide (1.2025.0)
228 / 606


8.20
Change diagram orientation
8
DEPLOYMENT DIAGRAM
8.20.6
With Smetana (internal layout engine)
@startuml
!pragma layout smetana
left to right direction
card a
card b
package A {
card a1
card a2
card a3
card a4
card a5
package sub_a {
card sa1
PlantUML Language Reference Guide (1.2025.0)
229 / 606


8.20
Change diagram orientation
8
DEPLOYMENT DIAGRAM
card sa2
card sa3
}
}
package B {
card b1
card b2
card b3
card b4
card b5
package sub_b {
card sb1
card sb2
card sb3
}
}
@enduml
PlantUML Language Reference Guide (1.2025.0)
230 / 606