6
ACTIVITY DIAGRAM (NEW SYNTAX)
6
Activity Diagram (New Syntax)
The previous syntax used for activity diagrams encountered several limitations and maintainability issues.
Recognizing these drawbacks, we have introduced a wholly revamped syntax and implementation that is
not only user-friendly but also more stable.
6.0.1
Benefits of the New Syntax
• No Dependency on Graphviz: Just like with sequence diagrams, the new syntax eliminates the
necessity for Graphviz installation, thereby simplifying the setup process.
• Ease of Maintenance: The intuitive nature of the new syntax means it is easier to manage and
maintain your diagrams.
6.0.2
Transition to the New Syntax
While we will continue to support the old syntax to maintain compatibility, we highly encourage users
to migrate to the new syntax to leverage the enhanced features and benefits it offers.
Make the shift today and experience a more streamlined and eﬀicient diagramming process with the new
activity diagram syntax.
6.1
Simple action
Activities label starts with : and ends with ;.
Text formatting can be done using creole wiki syntax.
They are implicitly linked in their definition order.
@startuml
:Hello world;
:This is defined on
several **lines**;
@enduml
6.2
Start/Stop/End
You can use start and stop keywords to denote the beginning and the end of a diagram.
@startuml
start
:Hello world;
:This is defined on
several **lines**;
stop
@enduml
PlantUML Language Reference Guide (1.2025.0)
122 / 606


6.3
Conditional
6
ACTIVITY DIAGRAM (NEW SYNTAX)
You can also use the end keyword.
@startuml
start
:Hello world;
:This is defined on
several **lines**;
end
@enduml
6.3
Conditional
You can use if, then, else and endif keywords to put tests in your diagram. Labels can be provided
using parentheses.
The 3 syntaxes are possible:
• if (...) then (...) ... [else (...) ...] endif
@startuml
start
if (Graphviz installed?) then (yes)
:process all\ndiagrams;
else (no)
:process only
__sequence__ and __activity__ diagrams;
endif
stop
@enduml
PlantUML Language Reference Guide (1.2025.0)
123 / 606


6.3
Conditional
6
ACTIVITY DIAGRAM (NEW SYNTAX)
• if (...) is (...) then ... [else (...) ...] endif
@startuml
if (color?) is (<color:red>red) then
:print red;
else
:print not red;
endif
@enduml
• if (...) equals (...) then ... [else (...) ...] endif
@startuml
if (counter?) equals (5) then
:print 5;
else
:print not 5;
endif
@enduml
[Ref. QA-301]
6.3.1
Several tests (horizontal mode)
You can use the elseif keyword to have several tests (by default, it is the horizontal mode):
@startuml
start
if (condition A) then (yes)
:Text 1;
elseif (condition B) then (yes)
:Text 2;
stop
(no) elseif (condition C) then (yes)
:Text 3;
(no) elseif (condition D) then (yes)
PlantUML Language Reference Guide (1.2025.0)
124 / 606


6.3
Conditional
6
ACTIVITY DIAGRAM (NEW SYNTAX)
:Text 4;
else (nothing)
:Text else;
endif
stop
@enduml
6.3.2
Several tests (vertical mode)
You can use the command !pragma useVerticalIf on to have the tests in vertical mode:
@startuml
!pragma useVerticalIf on
start
if (condition A) then (yes)
:Text 1;
elseif (condition B) then (yes)
:Text 2;
stop
elseif (condition C) then (yes)
:Text 3;
elseif (condition D) then (yes)
:Text 4;
else (nothing)
:Text else;
endif
stop
@enduml
PlantUML Language Reference Guide (1.2025.0)
125 / 606


6.4
Switch and case [switch, case, endswitch]
6
ACTIVITY DIAGRAM (NEW SYNTAX)
You can use the -P command-line option to specify the pragma:
java -jar plantuml.jar -PuseVerticalIf=on
[Refs. QA-3931, GH-582]
6.4
Switch and case [switch, case, endswitch]
You can use switch, case and endswitch keywords to put switch in your diagram.
Labels can be provided using parentheses.
@startuml
start
switch (test?)
case ( condition A )
:Text 1;
case ( condition B )
:Text 2;
case ( condition C )
:Text 3;
case ( condition D )
:Text 4;
case ( condition E )
:Text 5;
endswitch
stop
@enduml
PlantUML Language Reference Guide (1.2025.0)
126 / 606


6.5
Conditional with stop on an action [kill, detach]
6
ACTIVITY DIAGRAM (NEW SYNTAX)
6.5
Conditional with stop on an action [kill, detach]
You can stop action on a if loop.
@startuml
if (condition?) then
:error;
stop
endif
#palegreen:action;
@enduml
But if you want to stop at the precise action, you can use the kill or detach keyword:
• kill
@startuml
if (condition?) then
#pink:error;
kill
endif
#palegreen:action;
@enduml
[Ref. QA-265]
• detach
PlantUML Language Reference Guide (1.2025.0)
127 / 606


6.6
Repeat loop
6
ACTIVITY DIAGRAM (NEW SYNTAX)
@startuml
if (condition?) then
#pink:error;
detach
endif
#palegreen:action;
@enduml
6.6
Repeat loop
6.6.1
Simple repeat loop
You can use repeat and repeat while keywords to have repeat loops.
@startuml
start
repeat
:read data;
:generate diagrams;
repeat while (more data?) is (yes) not (no)
stop
@enduml
6.6.2
Repeat loop with repeat action and backward action
It is also possible to use a full action as repeat target and insert an action in the return path using the
backward keyword.
@startuml
start
PlantUML Language Reference Guide (1.2025.0)
128 / 606


6.7
Break on a repeat loop [break]
6
ACTIVITY DIAGRAM (NEW SYNTAX)
repeat :foo as starting label;
:read data;
:generate diagrams;
backward:This is backward;
repeat while (more data?) is (yes)
->no;
stop
@enduml
[Ref. QA-5826]
6.7
Break on a repeat loop [break]
You can use the break keyword after an action on a loop.
@startuml
start
repeat
:Test something;
if (Something went wrong?) then (no)
#palegreen:OK;
break
endif
->NOK;
:Alert "Error with long text";
repeat while (Something went wrong with long text?) is (yes) not (no)
->//merged step//;
:Alert "Success";
stop
@enduml
PlantUML Language Reference Guide (1.2025.0)
129 / 606


6.8
Goto and Label Processing [label, goto]
6
ACTIVITY DIAGRAM (NEW SYNTAX)
[Ref. QA-6105]
6.8
Goto and Label Processing [label, goto]
￿It is currently only experimental ￿
You can use label and goto keywords to denote goto processing, with:
• label <label_name>
• goto <label_name>
@startuml
title Point two queries to same activity\nwith `goto`
start
if (Test Question?) then (yes)
'space label only for alignment
label sp_lab0
label sp_lab1
'real label
label lab
:shared;
else (no)
if (Second Test Question?) then (yes)
label sp_lab2
goto sp_lab1
else
:nonShared;
endif
endif
:merge;
PlantUML Language Reference Guide (1.2025.0)
130 / 606


6.9
While loop
6
ACTIVITY DIAGRAM (NEW SYNTAX)
@enduml
[Ref. QA-15026, QA-12526 and initially QA-1626]
6.9
While loop
6.9.1
Simple while loop
You can use while and endwhile keywords to have while loop.
@startuml
start
while (data available?)
:read data;
:generate diagrams;
endwhile
stop
@enduml
It is possible to provide a label after the endwhile keyword, or using the is keyword.
@startuml
while (check filesize ?) is (not empty)
:read file;
endwhile (empty)
:close file;
PlantUML Language Reference Guide (1.2025.0)
131 / 606


6.9
While loop
6
ACTIVITY DIAGRAM (NEW SYNTAX)
@enduml
6.9.2
While loop with backward action
It is also possible to insert an action in the return path using the backward keyword.
@startuml
while (check filesize ?) is (not empty)
:read file;
backward:log;
endwhile (empty)
:close file;
@enduml
[Ref. QA-11144]
6.9.3
Infinite while loop
If you are using detach to form an infinite while loop, then you will want to also hide the partial arrow
that results using -[hidden]->
@startuml
:Step 1;
if (condition1) then
while (loop forever)
:Step 2;
endwhile
-[hidden]->
detach
else
:end normally;
stop
endif
@enduml
PlantUML Language Reference Guide (1.2025.0)
132 / 606


6.10
Parallel processing [fork, fork again, end fork, end merge]
6
ACTIVITY DIAGRAM (NEW SYNTAX)
6.10
Parallel processing [fork, fork again, end fork, end merge]
You can use fork, fork again and end fork or end merge keywords to denote parallel processing.
6.10.1
Simple fork
@startuml
start
fork
:action 1;
fork again
:action 2;
end fork
stop
@enduml
6.10.2
fork with end merge
@startuml
start
fork
:action 1;
fork again
:action 2;
end merge
stop
@enduml
PlantUML Language Reference Guide (1.2025.0)
133 / 606


6.10
Parallel processing [fork, fork again, end fork, end merge]
6
ACTIVITY DIAGRAM (NEW SYNTAX)
[Ref. QA-5320]
@startuml
start
fork
:action 1;
fork again
:action 2;
fork again
:action 3;
fork again
:action 4;
end merge
stop
@enduml
@startuml
start
fork
:action 1;
fork again
:action 2;
end
end merge
stop
@enduml
[Ref. QA-13731]
6.10.3
Label on end fork (or UML joinspec):
@startuml
start
fork
:action A;
fork again
PlantUML Language Reference Guide (1.2025.0)
134 / 606


6.10
Parallel processing [fork, fork again, end fork, end merge]
6
ACTIVITY DIAGRAM (NEW SYNTAX)
:action B;
end fork {or}
stop
@enduml
@startuml
start
fork
:action A;
fork again
:action B;
end fork {and}
stop
@enduml
[Ref. QA-5346]
6.10.4
Other example
@startuml
start
if (multiprocessor?) then (yes)
fork
:Treatment 1;
fork again
:Treatment 2;
end fork
else (monoproc)
:Treatment 1;
:Treatment 2;
endif
@enduml
PlantUML Language Reference Guide (1.2025.0)
135 / 606


6.11
Split processing
6
ACTIVITY DIAGRAM (NEW SYNTAX)
6.11
Split processing
6.11.1
Split
You can use split, split again and end split keywords to denote split processing.
@startuml
start
split
:A;
split again
:B;
split again
:C;
split again
:a;
:b;
end split
:D;
end
@enduml
6.11.2
Input split (multi-start)
You can use hidden arrows to make an input split (multi-start):
@startuml
split
-[hidden]->
:A;
split again
-[hidden]->
PlantUML Language Reference Guide (1.2025.0)
136 / 606


6.11
Split processing
6
ACTIVITY DIAGRAM (NEW SYNTAX)
:B;
split again
-[hidden]->
:C;
end split
:D;
@enduml
@startuml
split
-[hidden]->
:A;
split again
-[hidden]->
:a;
:b;
split again
-[hidden]->
(Z)
end split
:D;
@enduml
[Ref. QA-8662]
6.11.3
Output split (multi-end)
You can use kill or detach to make an output split (multi-end):
@startuml
start
split
:A;
kill
split again
:B;
detach
split again
:C;
kill
PlantUML Language Reference Guide (1.2025.0)
137 / 606


6.12
Notes
6
ACTIVITY DIAGRAM (NEW SYNTAX)
end split
@enduml
@startuml
start
split
:A;
kill
split again
:b;
:c;
detach
split again
(Z)
detach
split again
end
split again
stop
end split
@enduml
6.12
Notes
Text formatting can be done using creole wiki syntax.
A note can be floating, using floating keyword.
@startuml
start
:foo1;
floating note left: This is a note
:foo2;
note right
This note is on several
//lines// and can
contain <b>HTML</b>
====
* Calling the method ""foo()"" is prohibited
end note
stop
@enduml
PlantUML Language Reference Guide (1.2025.0)
138 / 606


6.12
Notes
6
ACTIVITY DIAGRAM (NEW SYNTAX)
You can add note on backward activity:
@startuml
start
repeat :Enter data;
:Submit;
backward :Warning;
note right: Note
repeat while (Valid?) is (No) not (Yes)
stop
@enduml
[Ref. QA-11788]
You can add note on partition activity:
@startuml
start
partition "**process** HelloWorld" {
note
This is my note
----
//Creole test//
end note
:Ready;
:HelloWorld(i)>
:Hello-Sent;
}
@enduml
PlantUML Language Reference Guide (1.2025.0)
139 / 606


6.13
Colors
6
ACTIVITY DIAGRAM (NEW SYNTAX)
[Ref. QA-2398]
6.13
Colors
You can specify a color for some activities.
@startuml
start
:starting progress;
#HotPink:reading configuration files
These files should be edited at this point!;
#AAAAAA:ending of the process;
@enduml
You can also use gradient color.
@startuml
start
partition #red/white testPartition {
#blue\green:testActivity;
}
@enduml
[Ref. QA-4906]
PlantUML Language Reference Guide (1.2025.0)
140 / 606


6.14
Lines without arrows
6
ACTIVITY DIAGRAM (NEW SYNTAX)
6.14
Lines without arrows
You can use skinparam ArrowHeadColor none in order to connect activities using lines only, without
arrows.
@startuml
skinparam ArrowHeadColor none
start
:Hello world;
:This is on defined on
several **lines**;
stop
@enduml
@startuml
skinparam ArrowHeadColor none
start
repeat :Enter data;
:Submit;
backward :Warning;
repeat while (Valid?) is (No) not (Yes)
stop
@enduml
6.15
Arrows
Using the -> notation, you can add texts to arrow, and change their color.
It’s also possible to have dotted, dashed, bold or hidden arrows.
@startuml
:foo1;
-> You can put text on arrows;
if (test) then
-[#blue]->
:foo2;
-[#green,dashed]-> The text can
PlantUML Language Reference Guide (1.2025.0)
141 / 606


6.16
Connector
6
ACTIVITY DIAGRAM (NEW SYNTAX)
also be on several lines
and **very** long...;
:foo3;
else
-[#black,dotted]->
:foo4;
endif
-[#gray,bold]->
:foo5;
@enduml
6.16
Connector
You can use parentheses to denote connector.
@startuml
start
:Some activity;
(A)
detach
(A)
:Other activity;
@enduml
6.17
Color on connector
You can add color on connector.
@startuml
PlantUML Language Reference Guide (1.2025.0)
142 / 606


6.18
Grouping or partition
6
ACTIVITY DIAGRAM (NEW SYNTAX)
start
:The connector below
wishes he was blue;
#blue:(B)
:This next connector
feels that she would
be better off green;
#green:(G)
stop
@enduml
[Ref. QA-10077]
6.18
Grouping or partition
6.18.1
Group
You can group activity together by defining group:
@startuml
start
group Initialization
:read config file;
:init internal variable;
end group
group Running group
:wait for user interaction;
:print information;
end group
stop
@enduml
PlantUML Language Reference Guide (1.2025.0)
143 / 606


6.18
Grouping or partition
6
ACTIVITY DIAGRAM (NEW SYNTAX)
6.18.2
Partition
You can group activity together by defining partition:
@startuml
start
partition Initialization {
:read config file;
:init internal variable;
}
partition Running {
:wait for user interaction;
:print information;
}
stop
@enduml
It’s also possible to change partition color:
PlantUML Language Reference Guide (1.2025.0)
144 / 606


6.18
Grouping or partition
6
ACTIVITY DIAGRAM (NEW SYNTAX)
@startuml
start
partition #lightGreen "Input Interface" {
:read config file;
:init internal variable;
}
partition Running {
:wait for user interaction;
:print information;
}
stop
@enduml
[Ref. QA-2793]
It’s also possible to add link to partition:
@startuml
start
partition "[[http://plantuml.com partition_name]]" {
:read doc. on [[http://plantuml.com plantuml_website]];
:test diagram;
}
end
@enduml
[Ref. QA-542]
PlantUML Language Reference Guide (1.2025.0)
145 / 606


6.18
Grouping or partition
6
ACTIVITY DIAGRAM (NEW SYNTAX)
6.18.3
Group, Partition, Package, Rectangle or Card
You can group activity together by defining:
• group;
• partition;
• package;
• rectangle;
• card.
@startuml
start
group Group
:Activity;
end group
floating note: Note on Group
partition Partition {
:Activity;
}
floating note: Note on Partition
package Package {
:Activity;
}
floating note: Note on Package
rectangle Rectangle {
:Activity;
}
floating note: Note on Rectangle
card Card {
:Activity;
}
floating note: Note on Card
end
@enduml
PlantUML Language Reference Guide (1.2025.0)
146 / 606


6.19
Swimlanes
6
ACTIVITY DIAGRAM (NEW SYNTAX)
6.19
Swimlanes
Using pipe |, you can define swimlanes.
It’s also possible to change swimlanes color.
@startuml
|Swimlane1|
start
:foo1;
|#AntiqueWhite|Swimlane2|
:foo2;
:foo3;
|Swimlane1|
:foo4;
|Swimlane2|
:foo5;
stop
@enduml
PlantUML Language Reference Guide (1.2025.0)
147 / 606


6.19
Swimlanes
6
ACTIVITY DIAGRAM (NEW SYNTAX)
You can add if conditional or repeat or while loop within swimlanes.
@startuml
|#pink|Actor_For_red|
start
if (color?) is (red) then
#pink:**action red**;
:foo1;
else (not red)
|#lightgray|Actor_For_no_red|
#lightgray:**action not red**;
:foo2;
endif
|Next_Actor|
#lightblue:foo3;
:foo4;
|Final_Actor|
#palegreen:foo5;
stop
@enduml
PlantUML Language Reference Guide (1.2025.0)
148 / 606


6.19
Swimlanes
6
ACTIVITY DIAGRAM (NEW SYNTAX)
You can also use alias with swimlanes, with this syntax:
• |[#<color>|]<swimlane_alias>| <swimlane_title>
@startuml
|#palegreen|f| fisherman
|c| cook
|#gold|e| eater
|f|
start
:go fish;
|c|
:fry fish;
|e|
:eat fish;
stop
@enduml
[Ref. QA-2681]
PlantUML Language Reference Guide (1.2025.0)
149 / 606


6.20
Detach or kill [detach, kill]
6
ACTIVITY DIAGRAM (NEW SYNTAX)
6.20
Detach or kill [detach, kill]
It’s possible to remove an arrow using the detach or kill keyword:
• detach
@startuml
:start;
fork
:foo1;
:foo2;
fork again
:foo3;
detach
endfork
if (foo4) then
:foo5;
detach
endif
:foo6;
detach
:foo7;
stop
@enduml
• kill
@startuml
:start;
fork
:foo1;
:foo2;
fork again
:foo3;
kill
PlantUML Language Reference Guide (1.2025.0)
150 / 606


6.21
SDL (Specification and Description Language)
6
ACTIVITY DIAGRAM (NEW SYNTAX)
endfork
if (foo4) then
:foo5;
kill
endif
:foo6;
kill
:foo7;
stop
@enduml
6.21
SDL (Specification and Description Language)
6.21.1
Table of SDL Shape Name
Name
Old syntax
Stereotype syntax
Input
<
<<input>>
Output
>
<<output>>
Procedure
|
<<procedure>>
Load
\
<<load>>
Save
/
<<save>>
Continuous
}
<<continuous>>
Task
]
<<task>>
[Ref. QA-11518, GH-1270]
6.21.2
SDL using final separator (Deprecated form)
By changing the final ; separator, you can set different rendering for the activity:
• |
• <
• >
PlantUML Language Reference Guide (1.2025.0)
151 / 606


6.21
SDL (Specification and Description Language)
6
ACTIVITY DIAGRAM (NEW SYNTAX)
• /
• \\
• ]
• }
@startuml
:Ready;
:next(o)|
:Receiving;
split
:nak(i)<
:ack(o)>
split again
:ack(i)<
:next(o)
on several lines|
:i := i + 1]
:ack(o)>
split again
:err(i)<
:nak(o)>
split again
:foo/
split again
:bar\\
split again
:i > 5}
stop
end split
:finish;
@enduml
PlantUML Language Reference Guide (1.2025.0)
152 / 606


6.21
SDL (Specification and Description Language)
6
ACTIVITY DIAGRAM (NEW SYNTAX)
6.21.3
SDL using Normal separator and Stereotype (Current oﬀiial form)
@startuml
start
:SDL Shape;
:input; <<input>>
:output; <<output>>
:procedure; <<procedure>>
:load; <<load>>
:save; <<save>>
:continuous; <<continuous>>
:task; <<task>>
end
@enduml
@startuml
:Ready;
:next(o); <<procedure>>
:Receiving;
split
:nak(i); <<input>>
:ack(o); <<output>>
split again
:ack(i); <<input>>
:next(o)
on several lines; <<procedure>>
:i := i + 1; <<task>>
:ack(o); <<output>>
split again
:err(i); <<input>>
:nak(o); <<output>>
split again
:foo; <<save>>
PlantUML Language Reference Guide (1.2025.0)
153 / 606


6.22
Complete example
6
ACTIVITY DIAGRAM (NEW SYNTAX)
split again
:bar; <<load>>
split again
:i > 5; <<continuous>>
stop
end split
:finish;
@enduml
6.22
Complete example
@startuml
start
:ClickServlet.handleRequest();
:new page;
if (Page.onSecurityCheck) then (true)
:Page.onInit();
if (isForward?) then (no)
:Process controls;
if (continue processing?) then (no)
stop
endif
if (isPost?) then (yes)
:Page.onPost();
else (no)
:Page.onGet();
endif
:Page.onRender();
endif
else (false)
PlantUML Language Reference Guide (1.2025.0)
154 / 606


6.22
Complete example
6
ACTIVITY DIAGRAM (NEW SYNTAX)
endif
if (do redirect?) then (yes)
:redirect process;
else
if (do forward?) then (yes)
:Forward request;
else (no)
:Render page template;
endif
endif
stop
@enduml
PlantUML Language Reference Guide (1.2025.0)
155 / 606


6.23
Condition Style
6
ACTIVITY DIAGRAM (NEW SYNTAX)
6.23
Condition Style
6.23.1
Inside style (by default)
@startuml
skinparam conditionStyle inside
start
repeat
:act1;
:act2;
repeatwhile (<b>end)
:act3;
PlantUML Language Reference Guide (1.2025.0)
156 / 606


6.23
Condition Style
6
ACTIVITY DIAGRAM (NEW SYNTAX)
@enduml
@startuml
start
repeat
:act1;
:act2;
repeatwhile (<b>end)
:act3;
@enduml
6.23.2
Diamond style
@startuml
skinparam conditionStyle diamond
start
repeat
:act1;
:act2;
repeatwhile (<b>end)
:act3;
@enduml
PlantUML Language Reference Guide (1.2025.0)
157 / 606


6.23
Condition Style
6
ACTIVITY DIAGRAM (NEW SYNTAX)
6.23.3
InsideDiamond (or Foo1) style
@startuml
skinparam conditionStyle InsideDiamond
start
repeat
:act1;
:act2;
repeatwhile (<b>end)
:act3;
@enduml
@startuml
skinparam conditionStyle foo1
start
repeat
:act1;
:act2;
repeatwhile (<b>end)
:act3;
@enduml
PlantUML Language Reference Guide (1.2025.0)
158 / 606


6.24
Condition End Style
6
ACTIVITY DIAGRAM (NEW SYNTAX)
[Ref. QA-1290 and #400]
6.24
Condition End Style
6.24.1
Diamond style (by default)
• With one branch
@startuml
skinparam ConditionEndStyle diamond
:A;
if (decision) then (yes)
:B1;
else (no)
endif
:C;
@enduml
• With two branches (B1, B2)
@startuml
skinparam ConditionEndStyle diamond
:A;
if (decision) then (yes)
:B1;
else (no)
:B2;
endif
:C;
@enduml
@enduml
PlantUML Language Reference Guide (1.2025.0)
159 / 606


6.24
Condition End Style
6
ACTIVITY DIAGRAM (NEW SYNTAX)
6.24.2
Horizontal line (hline) style
• With one branch
@startuml
skinparam ConditionEndStyle hline
:A;
if (decision) then (yes)
:B1;
else (no)
endif
:C;
@enduml
• With two branches (B1, B2)
@startuml
skinparam ConditionEndStyle hline
:A;
if (decision) then (yes)
:B1;
else (no)
:B2;
endif
:C;
@enduml
@enduml
PlantUML Language Reference Guide (1.2025.0)
160 / 606


6.25
Using (global) style
6
ACTIVITY DIAGRAM (NEW SYNTAX)
[Ref. QA-4015]
6.25
Using (global) style
6.25.1
Without style (by default)
@startuml
start
:init;
-> test of color;
if (color?) is (<color:red>red) then
:print red;
else
:print not red;
note right: no color
endif
partition End {
:end;
}
-> this is the end;
end
@enduml
6.25.2
With style
You can use style to change rendering of elements.
@startuml
PlantUML Language Reference Guide (1.2025.0)
161 / 606


6.25
Using (global) style
6
ACTIVITY DIAGRAM (NEW SYNTAX)
<style>
activityDiagram {
BackgroundColor #33668E
BorderColor #33668E
FontColor #888
FontName arial
diamond {
BackgroundColor #ccf
LineColor #00FF00
FontColor green
FontName arial
FontSize 15
}
arrow {
FontColor gold
FontName arial
FontSize 15
}
partition {
LineColor red
FontColor green
RoundCorner 10
BackgroundColor PeachPuff
}
note {
FontColor Blue
LineColor Navy
BackgroundColor #ccf
}
}
document {
BackgroundColor transparent
}
</style>
start
:init;
-> test of color;
if (color?) is (<color:red>red) then
:print red;
else
:print not red;
note right: no color
endif
partition End {
:end;
}
-> this is the end;
end
@enduml
PlantUML Language Reference Guide (1.2025.0)
162 / 606


6.25
Using (global) style
6
ACTIVITY DIAGRAM (NEW SYNTAX)
PlantUML Language Reference Guide (1.2025.0)
163 / 606